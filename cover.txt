Hello Sir ,

Thanks for reaching out .. !

with reference of your post on linkedin "Automatiom Test Engineer .."

Little brief about me:   

I am  a Software Test Engineer having 11.6 years(6 years in Selenium Automation) of exp in software testing field. 
till date worked on lots of testing Technologies and Tools like 
     Selenium RC,  Selenium WebDriver,
     JAVA, Android SDK, Appium (mobile Automation Testing)
     TestNG, Junit, AutoIT,
     Web-services using SoupUI,Jmeter , Github, Jenkins
     Database testing and Also worked on Big data Analysis,etc
	 


 Certified in ORACLE (OCA) and ISTQB  

 Can join in 45 days for more details please visit my profile on LinkedIn or Find attached resume   
 
waiting for your response...!!!
Thanks, 
sachin 
+91-9665040076 
https://in.linkedin.com/pub/sachin-gainewar/12/121/1a1


=====================================================
Highly experience and Specialist in Automation testing , various databases and Bigdata , SQL and no-sql scripting , different languages - Java, groovy, ruby, etc 

====================================================

Hello Sir ,

Thanks for reaching out .. !

Little brief about me:   

I am Sachin a Hadoop Developer. Having 11+ years of Experience  in Information Technology. 
3 years in Bigdata Developer ( MapReduce and 2.6 years in Hive Development)
6 years in JAVA with Selenium Automation  and 2 years in Functional.  
So far worked on lots of Technologies and Tools like 
 Hadoop , HDFS, HIVE , MapReduce, sqoop, etc
 JAVA, Android SDK 
 Web-services using SoupUI,Github, Jenkins
 Selenium RC,  Selenium WebDriver,  
 TestNG, Junit, AutoIT,
 Database testing and as Big data Analyst 

 Certified in ORACLE (OCA), ISTQB , Core-Java and Linux Level-1 from RankSheet and "Bigdata and Hadoop" Certification from Edureka

 Can join in 15 days for more details please find attached resume   
 
waiting for your response...!!!
Thanks, 
sachin 
+91-9890911500 



Hi Tom, I would like to take this opportunity to position about DSRC 's testing capabilities. I have ISTQB certified Test Analysts at DSRC specialized in Test Automation. Would you be available for a quick call with us this week to discuss 


Passport details -
G8137890
09-04-2018



Test (Fake) Account :-
--------------
gamil :- sanjanawithlove1990 / Test12!@
FB :- sanjanawithlove1990



BigData
andatory 2+ years of experience in Big Data technology - Hadoop on Cloudera, MapR, HortenWorks
Hands on experience in Hadoop eco-system - MapReduce, Hive, Pig, Spark, Hbase
Strong experience in Java, Play, Grails, Scala: Javascript frameworks - Angular, Backbone: Distributed frameworks - Akka, Node, Vert.x: DB/NoSql - MongoDB, Neo4J, MySql


job Responsibilities 
Architect responsible for driving the BigData/Cloud initiatives that maximize the pace of innovation with Development and Product.
Through strong collaboration, develop architectures, detailed designs, and in some cases POCs to support Development driven features requiring changes to the infrastructure.
Span full range from high level architectures to developing POCs
Provide technical leadership, including mentoring infrastructure, cloud, and DevOps.
Drive cloud performance and scalability optimization for PhenomPeople and our use of AWS, CDN
Define and evangelize cloud-related optimizations and best practices (e.g. autoscaling methodologies, etc.)
Lead the effort in deploying the product suite as SaaS/PaaS/IaaS on Cloud (AWS, Rackspace, Google etc.,)
Hire and spot highly skilled resources and train, groom and mentor delivery resources into a well-knit, world-class delivery teams
Proactively define and expose metrics that can improve our services' performance, scalability, and availability
Assist with production triage when performance or availability issues arise



Designation- Analyst/Sr. Analyst/Associate/Sr. Associate/AVP
Skills- Java, J2EE with Hadoop / Bigdata, SQL Server / Oracle


5+ years of hands-on experience in application development in an enterprise setup
Experience / Understanding of Apache, Hadoop and Map- Reduce architecture.
Experience / Understanding of any No- SQL or Column- Store Database.
Be responsible for the technical design and experience in guiding/mentoring others.
Strong OOPS knowledge, including experience with design patterns
Experience with Java/JEE and open source frameworks/tools like Hibernate, Spring, Maven,
Ant, Subversion, Git, any web framework
Experience with relational databases like MySQL/Oracle
Experience with enterprise application servers like Tomcat/Weblogic/Websphere.
Exposure to Web Services - SOAP and RESTFUL
Exposure to Agile/Scrum, TDD, Continuous Integration tools like Jenkins, Bamboo etc.
Should be able to lead a team and take ownership of application design and development
Excellent analytical aptitude and problem solving skills.
Excellent communication and customer interfacing skills.
Desired Skills:
Understanding and experience of Pig, Hive, Hbase, Cassandra, Mahout etc.
Experience of working in Agile environments using Scrum/XP
Writing white papers, blogging and participation in Java related events and conferences are a
definitive plus.
Individual contributor with excellent analytical skills and ability to think out of box (experience
with requirements gathering/engineering are an advantage).
Customer focused is a definite desirable.


Build scalable, high- performance, and efficient pipelines and workflows that are capable of processing billions of transactions and real-time customer activities.
Work with big data and provide to our data scientists the right tools, data marts and rollups to build their machine learning models.
Fluent in Pig and/or Hive with experience in building UDFs, Pig and Hadoop streaming.
Build automated reports that can help the team to proactively identify quality and/or coverage problems in releases or new versions of our models.
Apply knowledge of Azkaban, Oozie or Hamake for workflow management and job scheduling.
Provide senior leadership and demonstrable, programming expertise and proficiency in Java, C/C++, or Python.
Work on Data Warehousing architecture and data modeling best practices.

·         Work with big data and provide to our data scientists the right tools, data marts and rollups to build their machine learning models.
·         Fluent in Pig and/or Hive with experience in building UDFs, Pig and Hadoop streaming.
·         Build automated reports that can help the team to proactively identify quality and/or coverage problems in releases or new versions of our models.
·         Apply knowledge of Azkaban, Oozie or Hamake for workflow management and job scheduling.
·         Provide senior leadership and demonstrable, programming expertise and proficiency in Java, C/C++, or Python.
·         Work on Data Warehousing architecture and data modeling best practices.






The TA should be very familiar with at least 2 major distributions of Hadoop (Hortonworks, Pivotal, Cloudera, MapR) - higher preference will be given to candidates with Pivotal HD experience. It is expected that the TA should have at least 2 years of implementation experience on Big Data based analytics for Enterprises. Just doing certain PoC or pilot etc. won't be considered sufficient experience.
*	The TA candidate should be hands-on and knowledgeable on Hadoop ecosystem components and utilities like YARN, Zookeeper, Pig, Hive, Oozie, Flume, Sqoop, Spark and Storm.
*	The TA candidate should have project implementation experience with at least one No-SQL database like HBase, Cassandra, MongoDB, CouchDB etc. Should be familiar with concepts of document oriented vs. key-value based No-SQL.
*	In case the candidate has worked on Pivotal HD then it would be desired to have some experience on HAWQ and GemFire-XD. If however, the candidate has not worked on Pivotal HD then this clause is not applicable - but that will be considered as a disadvantage or risk related to hiring that candidate.
*	The candidate should have basic knowledge about R, Qlik, Postgres, Kerberos, Knox and Ranger.
*	The candidate should have solid background on J2EE technologies including Webservices development and Enterprise Application Integration space. Some experience with Message Queue based technologies like RabbitMQ or ActiveMQ etc. would be considered plus point.
*	Some basic knowledge on analytics and business intelligence would be mandatory.
*	Must be having good analytical capability (logical reasoning) and good communication.









eTouch Sysytem pvt ltd  as Test Lead 

Intude: It's KEYWORD Driven Automatiom Framework with Selenium base. Excellent Framework gives feasiblity to arrange the Test suite, Test Cases, Test Data, etc as per their requirments.
Manage priorties, dependant Test,Vidoe recording, etc at the Client's end. Even Bug filing process is taken care by Framework.

Resposibility:- 
Lead a Test
Provide Maintance support to Framework
Add new hencement on the Framework
Working on Automatiom Architecture





Technical expertise in Java, HDFS, Map/Reduce, Hive, Pig, oozie, SQOOP

	Understanding of business requirements and translating them into well-engineered and integrated

	Technical solutions using Service Oriented Architecture (SOA) and reusable components

	Define, develop and deploy frameworks and applications

	Experience in Defining, analyzing and reviewing software architecture and requirements for products

*	Shift timings if applicable: No

*	Mode of staffing: Permanent

- As a Big Data Engineer; you will be responsible to design and develop multiple big data utilities that automate various aspects of data acquisition, ingestion, storage, access and transformation of data volume that scale up to petabytes. You will be part of a multi-disciplinary technical team. 
- Design and build utilities to auto create Hive structures, HDFS directory structures and partitions based on source definitions. 
- Design and build custom code to perform change data capture, Audit controls and data reconciliation and entity resolution; Create custom UDFs to be called from Ab Initio ETL graphs; 
- Design and build framework to implement security policies and requirements to mask, redact and encrypt based on the data classifications using Cloudera security tools (Sentry, Gazzang) and Gaurdium. 
- Create technical specifications, Unit test plan/cases and document unit test results. Perform Integration testing with Ab Initio. Support System Integration and Customer Acceptance testing. 
- You will be part of the build team and work with Ab Initio Designers and Developers to ensure the utilities are integrated, optimized and performing as designed. 

Required Skills : General Consulting Skills 
- To have excellent written and verbal communication skills 
- To be a self-starter 
- To be able to work in teams, as a big data environment is developed in a team of employees with different disciplines 
- To be able to work creatively and analytically in a problem-solving environment 
- To be able to work in a fast-paced agile development environment. 

Implementation Experience : 
- At least 2 full Big Data implementations. Experience working with Cloudera is preferred. 

Technical Skills : 
- 5+ years of Java development experience. 
- 2-4 years of coding experience with Java, Mapreduce, Pig and Python. 
- Experience working with Cloudera Manager, Navigator, Impala and security tools (Sentry, Gazzang) 
- 2-4 years of deep working knowledge in use of open source tools such as; Hive, Sqoop, etc.. 
- 4 + years of hands on experiences and thorough understanding of Linux scripting. 
- Deep knowledge of Web Services, SOA, HTTPS, WSDL, SOAP. 
- Familiarity with business intelligence and data warehousing development processes and techniques









I provide the QA support to Mortgage , Deposite, Credit Card verticals plus  Inhouse Tool WidgetCentre, ProductCentre, Inline pop-up tool and Wisepiggy 
1.	Developed  test Automation framework (Data Driver Framework) in Wristelblower Project. It is more Generic Framework that entire Quinstreet Can use to for Test Automation , Automation Test Case maintenance , Reporting and functionality breaking Alert, etc. Plan is to developing the different frameworks to satisfy the Quinstreet Testing Requirements..
Lot more feature is added like UI comparison , Data connectivity , functional testing , Window's desktop application testing ,etc Plan is make the framework to capture web-call. So that tracking process can be automated.
2.  Developed the more generic Automation Scripts to verify the Feature , functionality , navigation , page load , etc and verify the these functionality on periodically 
3.  Learn the BigData Technology and Played a crusial role on Analsis of revenue system for Mortgage, Deposit while migration from Traditional database system to Bigdata 
4. 	Provide the training of automation tool  to Producer Team to make their daily repetitive work easier. Which result is the Enter India HQF team is using the Selenium tool to for Generating the weekly Revenue reporting  
5. 	Actively Involved in the interview process for QA selection for HQF and other verticals. Also manage drive QA 
6. 	Provide the training session to Entire Quinstreet QA team(India) on Selenium Automation tools
7.  Keep track on Prod error log for deposited , mortgage, Deposit and Credit card verticals
8.	Worked on across HQ team: Worked with java team , Cat Team HSH refactoring , GTL task 
9. 	Admin tool for inline text is the anther major in-house tool of HQF vertical is QAed by me
10. QAing Product Center Database comes into my reposposibility
11. Giving more focus Evaluted the Process. findout the flaws and sugessted the improvement on process in "Best Practices" (After team structured is changed and Nikhil come in picture )
12.	I Played crucial role in process set-up to reduce the repetitive work, avoid lagging the deadline, etc also keep track on process to check its meeting the requirement.(Before team structured changed)
13. Interaction with HQF Team and across the Quinstreet Teams and developed the Healthy relation and friendly environment 
14. Involved developing the Specification Docs/Flowchart for wisepiggy, Test plan, Test Cases has created whereever it is required like mostly for Sites Redesign/Re-structure (HSH).
15. Handling the multi tasking :- smoothly handle the multiple task at a time and deliver the Products on given Deadline without compromising with Quality.
16. Continuously share the valuable suggestion to enhance the product Quality. best example >> HSH refactoring, Feature changes on sites level(WP), process planning  etc.
17.	Proactively in process of  Knowledge Sharing across Verticals in QA teams 
18. Always meet the tight deadline. Best example is HSH-refactoring  
19.	While meeting the deadline not compromise with Test Coverage. example is HSH-refactoring 
20.	Single handle provide the QA support to all HQF team without compromising with quality.
21.	Always ready to help other team members
22.	Mange to maintain healthy and productive relationship within team 
23.	Developed and maintain Quality deliverables in our repository system (Wiki and phantom)throught out the testing Process 
24.	Process Estimation  with functional break point methodology  
25. Always interacted with the people or Stockholder while estimating.   And always committed to Estimation 
26.	Prepares Deliverables and customise the reports for Automation
27. Independently prepares timely, accurate, concise test deliverables by communicating the stockholders.
28. Accepts full responsibility and keeps business impact in mind before taking action.

Taken training sessions at Project levels/ Organisational level on automation tools 
28.	Got a  deep knowledge in our platform and tracking
28.	 


6.	Worked on across HQ team: Worked with java team , Cat Team Cardrating refactoring , GTL task 
7. 	QAing Product Center Database (both freelancer and genaral)  comes into my reposposibility
17	Manage to handle the Agile methodology projects.


------------------------------------------------------------------------------------------------------------------

Big data :--> 

WSAD and deploying to Websphere 6.x. 
UNIX shell scripting is good to have
SQ, PL/SQL and stored procedures, Teradata experience would be plus.
web application development experience in J2EE (Struts/JSP/Servlet). 
Hadoop Architecture having knowledge on Hadoop, Map Reduce, Hbase, Pig, Hive, YARN, Zookeeper , Solar, Sqoop, Flume.


* Experience on Oracle / SQL/RQL 
* Java and J2EE Development. Knowledge 
* Strong analysis skills (simple and evolutionary)
* Experience with continuous integration and build
* High ownership and self-motivated
  BFSI domain person would be preferred but not mandatory.
* Strong Verbal and Written communication skills
Excellent debugging skills and ability to efficiently solve problems
* Collaborate, communicate with different teams, and triage technical issues across teams.

5+ years of strong coding skills in JAVA
2+ years of experience implementing ETL/ELT processes with MapReduce, PIG, Hive
2+ years hands on experience with HDFS, HBASE/Cassandra on large data sets
3+ years of hands on experience with NoSQL (e.g. key value store, graph db, document db)
1+ years of Vertica knowledge
5+ years of solid experience in performance tuning, Shell/perl/python scripting
1+ years of experience with REST, JSON and modeling OLAP/OLTP systems



Data Scientist:-   
Develop and plan required analytic projects in response to business needs.
In conjunction with data owners and department managers, contribute to the development of data models and protocols for mining production databases.
Develop new analytical methods and/or tools as required.
Contribute to data mining architectures, modeling standards, reporting, and data analysis methodologies.
Conduct research and make recommendations on data mining products, services, protocols, and standards in support of procurement and development efforts.
Work with application developers to extract data relevant for analysis.
Collaborate with unit managers, end users, development staff, and other stakeholders to integrate data mining results with existing systems.
Provide and apply quality assurance best practices for data mining/analysis services.
Adhere to change control and testing processes for modifications to analytical models.
Create data definitions for new database file/table development and/or changes to existing ones as needed for analysis.
Determine required network components to ensure data access, as well as data consistency and integrity.
Respond to and resolve data mining performance issues. Monitor data mining system performance and implement efficiency improvements.
Manage and/or provide guidance to junior members of the team.






*	Design and implement applications to support distributed processing using Hadoop Eco system.
*	Build libraries, user defined functions, and frameworks around Hadoop
*	Research, evaluate and utilize new technologies/tools/frameworks around hadoop eco system such as Apache Kafka, Apache Spark, HDFS, Hive, HBase, etc.
*	Develop user defined functions to provide custom hbase/hive capabilities
*	Participating in the installation, configuration and administration of a single-node and multi-node cluster with technologies like HDFS, Apache Kafka, Apache Spark etc.

Qualifications:
*	Bachelor¹s degree in Computer Science, Management Information Systems or related field. 
*	8-10 years of experience building and managing complex products/solutions.
*	Total 5+ experience in Java/J2EE technology
*	Total 2+ years of hands on development experience in using Big Data Technology like: Hadoop (Apache Hadoop, MapR Hadoop)
*	Hands on experience in using in-memory database like HBase
*	Proficient in using Streaming based analytics using Apache Storm & Apache Spark
*	Proficient in using Messaging framework like Apache Kafka or RabbitMQ
*	Excellent knowledge of Unix/Linux.
*	Hands on experience building web services in Java/PHP/Python stack.
*	Experience developing Restful web services in Spring framework
*	Knowledge of web technologies and protocols (NoSQL/JSON/REST/JMS)
*	Expert level programming in Java.
*	Most importantly be a good team player and willingness to learn and implement new Big Data technologies as needed.


------------------------------




Implemented Lateral View in conjunction with UDTFs in Hive.
Worked extensively with Sqoop for importing and exporting data from MySQL into HDFS and Hive.
Performed complex Joins on the tables in Hive.
Load and transform large sets of structured, semi structured using Hive and Impala.

Connected Hive and Impala to Tableau reporting tool and generated graphical reports.
Created partitioned tables in Hive.





Hadoop Architecture having knowledge on Hadoop, Map Reduce, Hbase, Pig, Hive, YARN, Zookeeper , Solar, Sqoop, Flume.

Provide technical leadership, including mentoring infrastructure, cloud, and DevOps.
Define and evangelize cloud-related optimizations and best practices (e.g. autoscaling methodologies, etc.)
effortivly in deploying the product suite as SaaS/PaaS/IaaS on Cloud (AWS, Rackspace, Google etc.,)
Proactively define and expose metrics that can improve our services' performance, scalability, and availability
Assist with production triage when performance or availability issues arise
Work with big data and provide to our data scientists the right tools, data marts and rollups to build their machine learning models.
Build automated reports that can help the team to proactively identify quality and/or coverage problems in releases or new versions of our models.
*	The TA candidate should be hands-on and knowledgeable on Hadoop ecosystem components and utilities like YARN, Zookeeper, Pig, Hive, Oozie, Flume, Sqoop, Spark and Storm.
*	The TA candidate should have project implementation experience with at least one No-SQL database like HBase, Cassandra, MongoDB, CouchDB etc. Should be familiar with concepts of document oriented vs. key-value based No-SQL.
*	In case the candidate has worked on Pivotal HD, images , videos ,etc
*	Must be having good analytical capability (logical reasoning) and good communication.
- Design and build utilities to auto create Hive structures, HDFS directory structures and partitions based on source definitions. 

2+ years hands on experience with HDFS, HBASE/Cassandra on large data sets
3+ years of hands on experience with NoSQL (e.g. key value store, graph db, document db)


Contribute to data mining architectures, modeling standards, reporting, and data analysis methodologies.

*	Build libraries, user defined functions, and frameworks around Hadoop

Qualifications:
*	Bachelor¹s degree in Computer Science, Management Information Systems or related field. 
*	8-10 years of experience building and managing complex products/solutions.
*	Total 5+ experience in Java/J2EE technology
*	Total 2+ years of hands on development experience in using Big Data Technology like: Hadoop (Apache Hadoop, MapR Hadoop)
*	Hands on experience in using in-memory database like HBase
*	Proficient in using Streaming based analytics using Apache Storm & Apache Spark
*	Proficient in using Messaging framework like Apache Kafka or RabbitMQ
*	Excellent knowledge of Unix/Linux.
*	Hands on experience building web services in Java/PHP/Python stack.
*	Experience developing Restful web services in Spring framework
*	Knowledge of web technologies and protocols (NoSQL/JSON/REST/JMS)
*	Expert level programming in Java.
*	Most importantly be a good team player and willingness to learn and implement new Big Data technologies as needed.

----------------------------------

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

What is Abstraction?
It refers to the ability to make a class abstract in OOP.
It helps to reduce the complexity and also improves the maintainability of the system..
What is Abstract class?
These classes cannot be instantiated and are either partially implemented or not at all implemented.
This class contains one or more abstract methods which are simply method declarations without a body.

What is Marker Interface?
Marker interface in Java is interfaces with no field or methods. 
Uses of Mark Interfaces are following: 
• We use Marker interface to tell java compiler to add special behavior to the class implementing it. 
•	Java marker interface has no members in it. 
•	It is implemented by classes in get some functionality. 

Example: when we want to save the state of an object then we implement serializable interface.
Can an inner class be built in an Interface?
Yes,an inner class may be built an Interface

Example :
public interface xyz

{

static int p=0;

void m();

class c

{

c()

{

int q;

System.out.println("inside");

};

public static void main(String c[])

{

System.out.println("inside ");

}

}

}
How to define an Abstract class?
A class containing abstract method is called Abstract class. An Abstract class can't be instantiated.

Example of Abstract class :
abstract class testAbstractClass

{

protected String myString;

public String getMyString()

{

return myString;

}

public abstract string anyAbstractFunction();

}
How to define an Interface?
In Java Interface defines the methods but does not implement them. Interface can include constants.
A class that implements the interfaces is bound to implement all the methods defined in Interface.

Example of Interface :
public interface sampleInterface 

{

public void functionOne();

public long CONSTANT_ONE = 1000;

}
What's the difference between an interface and an abstract class? Also discuss the similarities?
Abstract class is a class which contain one or more abstract methods, which has to be implemented by sub classes.
Interface is a Java Object containing method declaration and doesn't contain implementation. 
The classes which have implementing the Interfaces must provide the method definition for all the methods Abstract class is a Class prefix with a abstract keyword followed by Class definition. 
Interface is a Interface which starts with interface keyword.Abstract class contains one or more abstract methods. 
where as Interface contains all abstract methods and final declarations
Abstract classes are useful in a situation that Some general methods should be implemented and specialization behavior should be implemented by child classes.
Interfaces are useful in a situation that all properties should be implemented.

---Differences are as follows ::

* Interfaces provide a form of multiple inheritance. A class can extend only one other class.
* Interfaces are limited to public methods and constants with no implementation. Abstract classes can have a partial implementation, protected parts, static methods, etc.
* A Class may implement several interfaces. But in case of abstract class, a class may extend only one abstract class.
* Interfaces are slow as it requires extra indirection to to find corresponding method in in the actual class. Abstract classes are fast.

---Similarities ::

* Neither Abstract classes or Interface can be instantiated.

Which access specifier can be used with Class ?
For top level class we can only use "public" and "default". We can use private with inner class.
Can we reduce the visibility of the inherited or overridden method ?
No.
Difference between Public, Private, Default and Protected ?
• Private - Not accessible outside object scope. 

• Public - Accessible from anywhere.

• Default - Accessible from anywhere within same package.

• Protected - Accessible from object and the sub class objects.
What will happen if we make the constructor private ?
We can't create the objects directly by invoking new operator.
Can we instantiate the object of derived class if parent constructor is protected ?
No
Can we declare an abstract method private ?
Ans:No Abstract methods can only be declared protected or public.
What is Access Specifier
• To Explicitly mention the way how the data (variables and methods of a class) available to outside.

• Access specifier is something which mentions the way how the member of a class has to be available to anything outside the class.

• Access specifiers not not applicable to the local variables.(present inside method).

• Access specifiers are the keywords using which we can control the accessibility of the members of a class.


What are the drawbacks of the arrays in java?
The main drawback of the arrays is that arrays are of fixed size. You can’t change the size of the array once you create it. Therefore, you must know how many elements you want in an array before creating it. You can’t insert or delete the elements once you create an array. Only you can do is change the value of the elements.
Can you change the size of the array once you define it? OR Can you insert or delete the elements after creating an array?
No. You can’t change the size of the array once you define it. You can not insert or delete the elements after creating an array. Only you can do is change the value of the elements.
What is the difference between int[] a and int a[ ] ?
Both are the legal methods to declare the arrays in java.
 What are the differences between Array and ArrayList in java?
ARRAY	ARRAYLIST
Arrays are of fixed length.	ArrayList is of variable length.
You can’t change the size of the 
array once you create it.	Size of the ArrayList grows and shrinks 
as you add or remove the elements
Array does not support generics.	ArrayList supports generics.
You can use arrays to store both 
primitive types as well as reference types.	You can store only reference types 
in an ArrayList.
How do you check the equality of two arrays in java? OR How do you compare the two arrays in java?
You can use Arrays.equals() method to compare one dimensional arrays and to compare multidimensional arrays, use Arrays.deepEquals() method.
What is ArrayIndexOutOfBoundsException in java? When it occurs?
ArrayIndexOutOfBoundsException is a run time exception which occurs when your program tries to access invalid index of an array i.e negative index or index higher than the size of the array.
How do you sort the array elements?
You can sort the array elements using Arrays.sort() method. This method internally uses quick sort algorithm to sort the array elements. 

import java.util.Arrays;
public class MainClass
{
public static void main(String[] args)
{
int[] a = new int[]{45, 12, 78, 34, 89, 21};
Arrays.sort(a);
System.out.println(Arrays.toString(a));
//Output : [12, 21, 34, 45, 78, 89]
}
}


Here is the java program which uses both the methods to find duplicate eleHow do you search an array for a specific element?
You can search an array to check whether it contains the given element or not using Arrays.binarySearch() method. This method internally uses binary search algorithm to search for an element in an array.
What value does array elements get, if they are not initialized?
They get default values.
What are the different ways to iterate over an array in java?
1) Using normal for loop
public class MainClass
{
public static void main(String[] args)
{
int[] a = new int[]{45, 12, 78, 34, 89, 21};
//Iterating over an array using normal for loop
for (int i = 0; i < a.length; i++)
{
System.out.println(a[i]);
}
}
}

2) Using extended for loop
public class MainClass
{
public static void main(String[] args)
{
int[] a = new int[]{45, 12, 78, 34, 89, 21};
//Iterating over an array using extended for loop
for (int i : a)
{
System.out.println(i);
}
}
}

What is Annotation?
Annotations are nothing but meta-data added to the Java Elements. Annotations define a java type exactly similar to Classes,Enums,Interfaces and they can be applied to several Java Elements.

• Runtime processing — Some annotations are available to be examined at runtime.
What are few of the Annotations pre defined by Java?
• Deprecated annotation indicates that the marked element is deprecated and should no longer be used. The compiler generates a warning whenever a program uses a method, class, or field with the 

• Deprecated annotation. 

• Override annotation informs the compiler that the element is meant to override an element declared in a superclass. 

• SuppressWarnings annotation tells the compiler to suppress specific warnings that it would otherwise generate. 

• SafeVarargs annotation, when applied to a method or constructor, asserts that the code does not perform potentially unsafe operations on its varargsparameter. When this annotation type is used, unchecked warnings relating to varargs usage are suppressed.

• FunctionalInterface annotation, introduced in Java SE 8, indicates that the type declaration is intended to be a functional interface, as defined by the Java Language Specification.
Annotations were introduced with which version of Java ?
Java 5.
Give an Example of Annotations ?
Suppose that a software group traditionally starts the body of every class with comments providing important information:
public class Generation3List extends Generation2List {

// Author: Samle Author

// Date: 3/15/2012

// Current revision: 1

// Last modified: 6/12/2014

// By: Sample Author

// Reviewers: Tom Hilton

// class code goes here


}
To add this same metadata with an annotation, you must first define the annotation type. The syntax for doing this is:



@interface ClassPreamble {

String author();

String date();

int currentRevision() default 1;

String lastModified() default "N/A";

String lastModifiedBy() default "N/A";

// Note use of array

String[] reviewers();

}
The annotation type definition looks similar to an interface definition where the keyword interface is preceded by the at sign (@) (@ = AT, as in annotation type). Annotation types are a form of interface, which will be covered in a later lesson. For the moment, you do not need to understand interfaces. 

The body of the previous annotation definition contains annotation type element declarations, which look a lot like methods. Note that they can define optional default values. 

After the annotation type is defined, you can use annotations of that type, with the values filled in, like this:
@ClassPreamble (

author = "Samle Author",

date = "3/15/2012",

currentRevision = 1,

lastModified = " 6/12/2014",

lastModifiedBy = "Sample Author",

// Note array notation

reviewers = {"Tom", "Hilton"}

)
Name few meta-annotations ?
• Retention annotation specifies how the marked annotation is stored:

• Documented annotation indicates that whenever the specified annotation is used those elements should be documented using the Javadoc tool. (By default, annotations are not included in Javadoc.) 

• Target annotation marks another annotation to restrict what kind of Java elements the annotation can be applied to. 

• Inherited annotation indicates that the annotation type can be inherited from the super class. (This is not true by default.) When the user queries the annotation type and the class has no annotation for this type, the class' superclass is queried for the annotation type. This annotation applies only to class declarations. 

• Repeatable annotation, introduced in Java SE 8, indicates that the marked annotation can be applied more than once to the same declaration or type use. For more information, see Repeating Annotations.
What are meta Annotations ?
Annotations that apply to other annotations are called meta-annotations.
Which annotations are used in Hibernate ?
• Entity • Table
• Id 
• Column
• Temporal
• Basic
• Enumerated
• Access
• Embeddable
• Lob
• AttributeOverride
• Embedded
• GeneratedValue
• ElementCollection
• JoinTable
• JoinColumn
• CollectionId
• GenericGenerator
• OneToOne
• OneToMany
• ManyToOne
• ManyToMany
• NotFound
What is the difference between these 2 annotations ?
• Entity

• Entity ( name="EMPLOYEES" )

The first annotation will try to map the Class with the Table as of same name as Class whereas the second annotation will specify the Entity name as "EMPLOYEES" and hence will try to map with Table Name "EMPLOYEES".
"What is the difference between these 2 annotations ?
• Entity ( name ="EMPLOYEES")

• Entity 
• Table ( name=""EMPLOYEES"" )

• Entity ( name="EMP")
• Table ( name="EMPLPYEES" )

1.First Annotation will set the Entity name as EMPLOYEES and hence will try to map with the same Table name. 

2.The second annotation will make the Entity mapped to table EMPLOYEES irrespective of the Entity Name ( which is class name in this case ). 

3.Third Annotations will set the different names for Enitity and Table and will explicitly map them.
What entries we make in the hibernate config file if we are not using hbm files but Annotations ?
We configure Entity classes having annotated mappings.
What are the annotations used in Junit with Junit4 ?
• Test
The Test annotation indicates that the public void method to which it is attached can be run as a test case.

• Before
The Before annotation indicates that this method must be executed before each test in the class, so as to execute some preconditions necessary for the test. 

• BeforeClass
The BeforeClass annotation indicates that the static method to which is attached must be executed once and before all tests in the class. 

• After
The After annotation indicates that this method gets executed after execution of each test. 

• AfterClass
The AfterClass annotation can be used when a method needs to be executed after executing all the tests in a JUnit Test Case class so as to clean-up the set-up. 

• Ignores
The Ignore annotation can be used when you want temporarily disable the execution of a specific test.
What are the different ID generating strategies using @GeneratedValue annotation ?
Auto , Identity , Sequence and Table..
How to create a Junit to make sure that the tested method throws an exception ?
Using annotation Test with the argument as expected exception.
• Test (expected = Exception.class)
How should we ignore or avoid executing set of tests ?
We can remove @Test from the respective test so as to avoid its execution. Alternatively we can put @Ignore annotation on the Junit file if we want to ignore all tests in a particular file.
How can we test methods individually which are not visible or declared private ?
We can either increase their visibility and mark them with annotation @VisibleForTesting or can use reflection to individually test those methods.
Which of the following annotation is used to avoid executing Junits ?

a. @explicit
b. @ignore
c. @avoid
d. @NoTest
b.@ignore
What is the @FunctionalInterface annotation ?
This is an informative annotation that specify that the interface is a functional interface. A Function Interface has only one abstract method and many default methods. Compiler generates an error if the interface specified with the annotation doesn't abide by the specifications for functional interface.
What is the package name for Annotation class?
java.text
Which is the Parent Class of Annotation class?
Object
How annotations are retrieved or read?
Annoations onece defined and used in some class we can read them using reflection package methods like getAnnotations().We have to first obtain the reference to the class which contains or uses the Annotaions then we cane write code like given below 
Class classObj = MyAnnotedClass.class;

Annotation[] annotations = classObj.getAnnotations();

for (Annotation annotation : annotations) {

}

Is Constructor definition is mandatory in class?
No, it is optional . If we do not define a constructor compiler will define a default constructor.
Define Constructor?
• Constructor is a special method given in OOP language for creating and initializing object. 

• In java , constructor role is only initializing object , and new keyword role is crating object.
Can we define a method with same name of class?
Yes, it is allowed to define a method with same class name. No compile time error and no runtime error is raised, but it is not recommended as per coding standards.
How compiler and JVM can differentiate constructor and method definitions of both have same class name?
By using return type , if there is a return type it is considered as a method else it is considered as constructor.
What are the Rules in defining a constructor?
• Constructor name should be same as class name. 

• It should not contain return type. 

• It should not contain Non Access Modifiers: final ,static, abstract, synchronized 

• In it logic return statement with value is not allowed. 

• It can have all four accessibility modifiers: private , public, protected, default 

• It can have parameters 

• It can have throws clause: we can throw exception from constructor. 

• It can have logic, as part of logic it can have all java legal statement except return statement with value. 

• We can not place return in constructor.
If we place return type in constructor prototype will it leads to Error?
No, because compiler and JVM considers it as a method.
Why return type is not allowed for constructor?
As there is a possibility to define a method with same class name , return type is not allowed to constructor to differentiate constructor block from method block.
Can we declare constructor as private?
• Yes we can declare constructor as private.

• All four access modifiers are allowed to constructor.

• We should declare constructor as private for not to allow user to create object from outside of our class.

• Basically we will declare private constructor in Singleton design pattern.
Why compiler given constructor is called as default constructor?
• Because it obtain all its default properties from its class. 

• They are

1.Its accessibility modifier is same as its class accessibility modifier
2.Its name is same as class name.
3.Its does not have parameters and logic.
Why constructor name is same as class name?
• Every class object is created using the same new keyword , so it must have information about the class to which it must create object . 

• For this reason constructor name should be same as class name.
what is default accessibility modifier of default constructor?
It is assigned from its class.
When developer must provide constructor explicitly?
If we want do execute some logic at the time of object creation, that logic may be object initialization logic or some other useful logic.
When compiler provides default constructor?
Only if there is no explicit constructor defined by developer.
If class has explicit constructor , will it has default constructor?
No. compiler places default constructor only if there is no explicit constructor.
What happens if you keep return type for a constructor?
It will be treated as a normal method. But compiler gives a warning saying that method has a constructor name. 
class MyClass

{

int MyClass()

{

return 0; //No Compile time error but just a warning

}

}
What is No-arg constructor?
Constructor without arguments is called no-arg constructor. Default constructor in java is always a no-arg constructor. 
class MyClass

{

public MyClass()

{

//No-arg constructor

}

}
What is the use of private constructor?
Private constructors are used to restrict the instantiation of a class. When a class needs to prevent other classes from creating it’s objects then private constructors are suitable for that. Objects to the class which has only private constructors can be created within the class. A very good use of private constructor is in singleton pattern. This ensures only one instance of a class exist at any point of time. Here is an example of singleton pattern using private constructor. 
class MyClass

{

private static MyClass object = null;

private MyClass()

{

//private constructor

}



public MyClass getObject()

{

if(object == null)

{

object = new MyClass(); //Creating object using private constructor

}

return object;

}

}
What is constructor chaining and how is it achieved in Java ?h3>
Can we use this() and super() in a method?
No, We can’t use this() and super() in a method.

class SuperClass

{

public SuperClass()

{

System.out.println("Super Class Constructor");

}

}



class SubClass extends SuperClass

{

public SubClass()

{

System.out.println("Sub Class Constructor");

}



void method()

{

this(); //Compile time error



super(); //Compile time error

}

}
What is a Default Constructor ?
The no argument constructor provided by Java Compiler if no constructor is specified.
Can we overload constructors ?
Yes
Does Constructor creates the object ?
New operator in Java creates objects. Constructor is the later step in object creation. Constructor's job is to initialize the members after the object has reserved memory for itself.
What are the common uses of "this" keyword in java ?
"this" keyword is a reference to the current object and can be used for following - 

1. Passing itself to another method. 

2. Referring to the instance variable when local variable has the same name. 

3. Calling another constructor in constructor chaining.


What is observer design pattern in Java
Observer design pattern is based on communicating changes in state of object to observers so that they can take there action. Simple example is a weather system where change in weather must be reflected in Views to show to public
Give example of decorator design pattern in Java ? Does it operate on object level or class level ?
Decorator pattern enhances capability of individual object. Java IO uses decorator pattern extensively and classical example is Buffered classes like BufferedReader and BufferedWriter which enhances Reader and Writer objects to perform Buffer level reading and writing for improved performance .


Design Pattern based on Encapsulation in Java
Many design pattern in Java uses encapsulation concept, one of them is Factory pattern which is used to create objects. Factory pattern is better choice than new operator for creating object of those classes whose creation logic can vary and also for creating different implementation of same interface. BorderFactory class of JDK is a good example of encapsulation in Java which creates different types of Border and encapsulate creation logic of Border. Singleton pattern in Java also encapsulate how you create instance by providing getInstance() method. since object is created inside one class and not from any other place in code you can easily change how you create object without affect other part of code.

What is difference between Encapsulation And Abstraction?
1.Abstraction solves the problem at design level while encapsulation solves the problem at implementation level 

2.Abstraction is used for hiding the unwanted data and giving relevant data. while Encapsulation means hiding the code and data into a single unit to protect the data from outside world. 

3. Abstraction lets you focus on what the object does instead of how it does it while Encapsulation means hiding the internal details or mechanics of how an object does something. 

4.For example: Outer Look of a Television, like it has a display screen and channel buttons to change channel it explains Abstraction but Inner Implementation detail of a Television how CRT and Display Screen are connect with each other using different circuits , it explains Encapsulation.



What is an Exception?
The exception is said to be thrown whenever an exceptional event occurs in java which signals that something is not correct with the code written and may give unexpected result. An exceptional event is a occurrence of condition which alters the normal program flow. Exceptional handler is the code that does something about the exception.
How are the exceptions handled in java?
When an exception occurs the execution of the program is transferred to an appropriate exception handler. The try-catch-finally block is used to handle the exception. The code in which the exception may occur is enclosed in a try block, also called as a guarded region. The catch clause matches a specific exception to a block of code which handles that exception. And the clean up code which needs to be executed no matter the exception occurs or not is put inside the finally block
Exceptions are defined in which java package?
All the exceptions are subclasses of java.lang.Exception
Explain the exception hierarchy in java.
The hierarchy is as follows: Exception Hierarchy
Exception Hierarchy
Throwable is a parent class of all Exception classes. There are two types of Exceptions: Checked exceptions and UncheckedExceptions or RunTimeExceptions. Both type of exceptions extends Exception class.
What is Runtime Exception or unchecked exception?
Runtime exceptions represent problems that are the result of a programming problem. Such problems include arithmetic exceptions, such as dividing by zero; pointer exceptions: such as trying to access an object through a null reference; and indexing exceptions: such as attempting to access an array element through an index that is too large or too small. Runtime exceptions need not be explicitly caught in try catch block as it can occur anywhere in a program, and in a typical one they can be very numerous. Having to add runtime exceptions in every method declaration would reduce a program's clarity. Thus, the compiler does not require that you catch or specify runtime exceptions (although you can). The solution to rectify is to correct the programming logic where the exception has occurred or provide a check. .
What is checked exception?
Checked exception are the exceptions which forces the programmer to catch them explicitly in try-catch block. It is a subClass of Exception. Example: IOException
What is difference between Error and Exception?
An error is an irrecoverable condition occurring at runtime. Such as OutOfMemory error. These JVM errors you can not repair them at runtime.Though error can be caught in catch block but the execution of application will come to a halt and is not recoverable. While exceptions are conditions that occur because of bad input or human error etc. e.g. FileNotFoundException will be thrown if the specified file does not exist. Or a NullPointerException will take place if you try using a null reference. In most of the cases it is possible to recover from an exception (probably by giving user a feedback for entering proper values etc.)
 What is throw keyword?
Throw keyword is used to throw the exception manually. It is mainly used when the program fails to satisfy the given condition and it wants to warn the application.The exception thrown should be subclass of Throwable.
public void parent()
{
try
{
child();
}catch(MyCustomException e) { }
}
public void child
{
String iAmMandatory=null;
if(iAmMandatory == null)
{
throw (new MyCustomException("Throwing exception using throw keyword");
}
}
What are the possible combination to write try, catch finally block?
1 try{
//lines of code that may throw an exception
}
catch(Exception e){
//lines of code to handle the exception thrown in try block
}
finally{
//the clean code which is executed always no matter the exception occurs or not.
}
2 try{}finally{}
3 try{
}
catch(Exception e){
//lines of code to handle the exception thrown in try block
}
The catch blocks must always follow the try block. If there are more than one catch blocks they all must follow each other without any block in between. The finally block must follow the catch block if one is present or if the catch block is absent the finally block must follow the try block.
When to make a custom checked Exception or custom unchecked Exception?
If an application can reasonably be expected to recover from an exception, make it a checked exception. If an application cannot do anything to recover from the exception, make it an unchecked exception. .
How to create custom Exception?
To create you own exception extend the Exception class or any of its subclasses. • class New1Exception extends Exception { } // this will create Checked Exception • class NewException extends IOExcpetion { } // this will create Checked exception • class NewException extends NullPonterExcpetion { } // this will create UnChecked exception
What is StackOverflowError?
The StackOverFlowError is an Error Object thrownby the Runtime System when it Encounters that your application/code has ran out of the memory. It may occur in case of recursive methods or a large amount of data is fetched from the server and stored in some object. This error is generated by JVM.
Once the control switches to the catch block does it return back to the try block to execute the balance code?
No. Once the control jumps to the catch block it never returns to the try block but it goes to finally block(if present).
Where is the clean up code like release of resources is put in try-catch-finally block and why?
The code is put in a finally block because irrespective of try or catch block execution the control will flow to finally block. Typically finally block contains release of connections, closing of result set etc.
Does the order of the catch blocks matter if the Exceptions caught by them are not subtype or supertype of each other?
No. If the exceptions are siblings in the Exception class’s hierarchy i.e. If one Exception class is not a subtype or supertype of the other, then the order in which their handlers(catch clauses) are placed does not matter.
 Is it valid to have a try block without catch or finally?
NO. This will result in a compilation error. The try block must be followed by a catch or a finally block. It is acceptable to omit the either catch or the finally block but not both.


Why is not considered as a good practice to write a single catch all handler to catch all the exceptions?
You can write a single catch block to handle all the exceptions thrown during the program. If you use the Superclass Exception in the catch block then you will not get the valuable information about each of the exception thrown during the execution, though you can find out the class of the exception occurred. Also it will reduce the readability of the code as the programmer will not understand what is the exact reason for putting the try-catch block.
Can a catch block throw the exception caught by itself ?
Yes. This is called rethrowing of the exception by catch block. e.g. the catch block below catches the FileNotFound exception and rethrows it again.
void checkEx()
throws FileNotFoundException
{
try{
//code that may throw the FileNotFoundException
}
catch(FileNotFound eFnf)
{
throw FileNotFound();
}
}

Is an empty catch block legal?
Yes you can leave the catch block without writing any actual code to handle the exception caught e.g. The code below is legal but not appropriate, as in this case you will nt get any information about the exception thrown.





What is Serialization?
Serializable is a marker interface. When an object has to be transferred over a network ( typically through rmi or EJB) or to persist the state of an object to a file, the object Class needs to implement Serializable interface. Implementing this interface will allow the object converted into bytestream and transfer over a network.
 What is use of serialVersionUID?
During object serialization, the default Java serialization mechanism writes the metadata about the object, which includes the class name, field names and types, and superclass. This class definition is stored as a part of the serialized object. This stored metadata enables the deserialization process to reconstitute the objects and map the stream data into the class attributes with the appropriate type Everytime an object is serialized the java serialization mechanism automatically computes a hash value. ObjectStreamClass's computeSerialVersionUID() method passes the class name, sorted member names, modifiers, and interfaces to the secure hash algorithm (SHA), which returns a hash value.The serialVersionUID is also called suid. So when the serilaize object is retrieved , the JVM first evaluates the suid of the serialized class and compares the suid value with the one of the object. If the suid values match then the object is said to be compatible with the class and hence it is de-serialized. If not InvalidClassException exception is thrown. 

Changes to a serializable class can be compatible or incompatible. Following is the list of changes which are compatible: 

• Add fields
• Change a field from static to non-static
• Change a field from transient to non-transient
• Add classes to the object tree

List of incompatible changes:

• Delete fields
• Change class hierarchy
• Change non-static to static
• Change non-transient to transient
• Change type of a primitive field

So, if no suid is present, inspite of making compatible changes, jvm generates new suid thus resulting in an exception if prior release version object is used . 

The only way to get rid of the exception is to recompile and deploy the application again. 

If we explicitly mention the sUid using the statement: 

private final static long serialVersionUID = 

then if any of the metioned compatible changes are made the class need not to be recompiled. But for incompatible changes there is no other way than to compile again.
What is the need of Serialization?
The serialization is used :- 

• To send state of one or more object’s state over the network through a socket.
• To save the state of an object in a file.
• An object’s state needs to be manipulated as a stream of bytes.
Other than Serialization what are the different approach to make object Serializable?
:Besides the Serializable interface, at least three alternate approaches can serialize Java objects: 

• For object serialization, instead of implementing the Serializable interface, a developer can implement the Externalizable interface, which extends Serializable. By implementing Externalizable, a developer is responsible for implementing the writeExternal() and readExternal() methods. As a result, a developer has sole control over reading and writing the serialized objects. 

• XML serialization is an often-used approach for data interchange. This approach lags runtime performance when compared with Java serialization, both in terms of the size of the object and the processing time. With a speedier XML parser, the performance gap with respect to the processing time narrows. Nonetheless, XML serialization provides a more malleable solution when faced with changes in the serializable object. 

• Finally, consider a "roll-your-own" serialization approach. You can write an object's content directly via either the ObjectOutputStream or the DataOutputStream. While this approach is more involved in its initial implementation, it offers the greatest flexibility and extensibility. In addition, this approach provides a performance advantage over Java serialization.
Do we need to implement any method of Serializable interface to make an object serializable?
No. Serializable is a Marker Interface. It does not have any methods.
What happens if the object to be serialized includes the references to other serializable objects?
If the object to be serialized includes references to the other objects, then all those object’s state also will be saved as the part of the serialized state of the object in question. The whole object graph of the object to be serialized will be saved during serialization automatically provided all the objects included in the object’s graph are serializable.
What happens if an object is serializable but it includes a reference to a non-serializable object?
If you try to serialize an object of a class which implements serializable, but the object includes a reference to an non-serializable class then a ‘NotSerializableException’ will be thrown at runtime. 

public class NonSerial
{
//This is a non-serializable class
}
public class MyClass implements Serializable
{
private static final long serialVersionUID = 1L;
private NonSerial nonSerial;
MyClass(NonSerial nonSerial)
{
this.nonSerial = nonSerial;
}
public static void main(String [] args)
{
NonSerial nonSer = new NonSerial();
MyClass c = new MyClass(nonSer);
try {
FileOutputStream fs = new FileOutputStream("test1.ser");
ObjectOutputStream os = new ObjectOutputStream(fs);
os.writeObject(c);
os.close();
}
catch (Exception e)
{
e.printStackTrace();
} try {
FileInputStream fis = new FileInputStream("test1.ser");
ObjectInputStream ois = new ObjectInputStream(fis);
c = (MyClass) ois.readObject();
ois.close();
}
catch (Exception e)
{
e.printStackTrace();
}
}
}


On execution of above code following exception will be thrown;

java.io.NotSerializableException: NonSerial
at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java)
Are the static variables saved as the part of serialization?
:No. The static variables belong to the class are not the part of the state of the object so they are not saved as the part of serialized object.

Does the order in which the value of the transient variables and the state of the object using the defaultWriteObject() method are saved during serialization matter?
Yes, while restoring the object’s state the transient variables and the serializable variables that are stored must be restored in the same order in which they were saved.


What is a Thread?
In Java, "thread" means two different things: 

• An instance of class java.lang.Thread.
• A thread of execution.

What is difference between a thread and a process?
1.Threads share the address space of the process that created it; processes have their own address.
2. Threads have direct access to the data segment of its process; processes have their own copy of the data segment of the parent process.
3. Threads can directly communicate with other threads of its process; processes must use interprocess communication to communicate with sibling processes.
4. Threads have almost no overhead; processes have considerable overhead.
5. New threads are easily created; new processes require duplication of the parent process.
6. Threads can exercise considerable control over threads of the same process; processes can only exercise control over child processes.
7. Changes to the main thread (cancellation, priority change, etc.) may affect the behavior of the other threads of the process; changes to the parent process do not affect child processes.

What are the advantages or usage of threads?
Threads support concurrent operations. For example,
• Multiple requests by a client on a server can be handled as an individual client thread. 

Threads often result in simpler programs.
• In sequential programming, updating multiple displays normally requires a big while-loop that performs small parts of each display update. 

Threads provide a high degree of control.
• Imagine launching a complex computation that occasionally takes longer than is satisfactory. 

Threaded applications exploit parallelism.
• A computer with multiple CPUs can literally execute multiple threads on different functional units without having to simulating multi-tasking ("time sharing").



What is the difference between yield() and sleep()?
• yield() allows the current the thread to release its lock from the object and scheduler gives the lock of the object to the other thread with same priority.

• sleep() allows the thread to go to sleep state for x milliseconds. When a thread goes into sleep state it doesn’t releases the lock.
What is the difference between wait() and sleep()?
• wait() is a method of Object class. sleep() is a method of Object class.

• sleep() allows the thread to go to sleep state for x milliseconds.

When a thread goes into sleep state it doesn’t release the lock. wait() allows thread to release the lock and goes to suspended state. The thread is only active when a notify() or notifAll() method is called for the same object.
What is difference between notify() and notfiyAll()?
• notify() wakes up the first thread that called wait() on the same object.

• notifyAll() wakes up all the threads that called wait() on the same object. The highest priority thread will run first
If code running is a thread creates a new thread what will be the initial priority of the newly created thread?
When a code running in a thread creates a new thread object, the priority of the new thread is set equal to the priority of the thread which has created it.
 When jvm starts up, which thread will be started up first?
When jvm starts up the thread executing main method is started.
What are the daemon threads?
Daemon thread are service provider threads run in the background,these not used to run the application code generally.When all user threads(non-daemon threads) complete their execution the jvm exit the application whatever may be the state of the daemon threads. Jvm does not wait for the daemon threads to complete their execution if all user threads have completed their execution. 

To create Daemon thread set the daemon value of Thread using setDaemon(boolean value) method. By default all the threads created by user are user thread. To check whether a thread is a Daemon thread or a user thread use isDaemon() method. 

Example of the Daemon thread is the Garbage Collector run by jvm to reclaim the unused memory by the application. The Garbage collector code runs in a Daemon thread which terminates as all the user threads are done with their execution.
.
Can static methods be synchronized?
Yes. Static methods are class methods and have only one copy of static data for the class, only one lock for the entire class is required. Every class in java is represented by java.lang.Class instance. The lock on this instance is used to synchronize the static methods.

Once a thread has been started can it be started again?
No. Only a thread can be started only once in its lifetime. If you try starting a thread which has been already started once an IllegalThreadStateException is thrown, which is a runtime exception. A thread in runnable state or a dead thread can not be restarted.


Can the start() method of the Thread class be overridden? If yes should it be overridden?
Yes the start() method can be overridden. But it should not be overridden as itâ€™s implementation in thread class has the code to create a new executable thread and is specialised.
What are the methods of the thread class used to schedule the threads?
The methods are as follows: 

• public static void sleep(long millis) throws InterruptedException
• public static void yield()
• public final void join() throws InterruptedException
• public final void setPriority(int priority)
• public final void wait() throws InterruptedException
• public final void notify()
• public final void notifyAll()
Which thread related methods are available in Object class?
The methods are: 

• public final void wait() throws Interrupted exception
• public final void notify()
• public final void notifyAll()
Which thread related methods are available in Thread class?
Methods which are mainly used : 

• public static void sleep(long millis) throws Interrupted exception
• public static void yield() public final void join() throws Interrupted exception
• public final void setPriority(int priority)
• public void start()
• public void interrupt()
• public final void join()
• public void run()
• public void resume()
List the methods which when called the thread does not release the locks held?
Following are the methods. 

• notify()
• join()
• sleep()
• yield().
List the methods which when called on the object the thread releases the locks held on that object?
wait()
Does each thread has its own thread stack?
Yes each thread has its own call stack. For eg

In the below example t1 and t3 will have the same stack and t2 will have its own independent stack.

Thread t1 = new Thread();
Thread t2 = new Thread();
Thread t3 = t1;
What is threadLocal variable?
ThreadLocal is a class. If a variable is declared as threadLocal then each thread will have a its own copy of variable and would not interfere with the other's thread copy. Typical scenario to use this would be giving JDBc connection to each thread so that there is no conflict. 

ThreadLocal class by JAVA API
public class ThreadLocal
{
public Object get();
public void set(Object newValue);
public Object initialValue();
}

Implementation of ThreadLocal
public class ConnectionDispenser
{
private static class ThreadLocalConnection extends ThreadLocal
{
public Object initialValue()
{
return DriverManager.getConnection(ConfigurationSingleton.getDbUrl());
}
}
private static ThreadLocalConnection conn = new ThreadLocalConnection();
public static Connection getConnection()
{
return (Connection) conn.get();
}
}


 What do you know about Java?
Java is a high-level programming language originally developed by Sun Microsystems and released in 1995. Java runs on a variety of platforms, such as Windows, Mac OS, and the various versions of UNIX.
 What are the supported platforms by Java Programming Language?
Java runs on a variety of platforms, such as Windows, Mac OS, and the various versions of UNIX/Linux like HP-Unix, Sun Solaris, Redhat Linux, Ubuntu, CentOS, etc.
Why Java is considered dynamic?
It is designed to adapt to an evolving environment. Java programs can carry extensive amount of run-time information that can be used to verify and resolve accesses to objects on run-time.
List two Java IDE’s?
Netbeans, Eclipse, etc.
 List some Java keywords(unlike C, C++ keywords)?
What do you mean by Object?
Object is a runtime entity and it’s state is stored in fields and behavior is shown via methods. Methods operate on an object's internal state and serve as the primary mechanism for object-to-object communication.
 Define class?
A class is a blue print from which individual objects are created. A class can contain fields and methods to describe the behavior of an object.
What is a Local Variable
Variables defined inside methods, constructors or blocks are called local variables. The variable will be declared and initialized within the method and it will be destroyed when the method has completed.
What is a Instance Variable
Instance variables are variables within a class but outside any method. These variables are instantiated when the class is loaded.
What is a Class Variable
These are variables declared with in a class, outside any method, with the static keyword.
List the three steps for creating an Object for a class?
An Object is first declared, then instantiated and then it is initialized.
What is the default value of byte datatype in Java?
Default value of byte datatype is 0.
What is the default value of float and double datatype in Java?
Default value of float and double datatype in different as compared to C/C++. For float its 0.0f and for double it’s 0.0d
When a byte datatype is used?
This data type is used to save space in large arrays, mainly in place of integers, since a byte is four times smaller than an int.
According to Java Operator precedence, which operator is considered to be with highest precedence?
Postfix operators i.e ( ) [ ] . is at the highest precedence
Variables used in a switch statement can be used with which datatypes?
Variables used in a switch statement can only be a byte, short, int, or char.
When parseInt() method can be used
This method is used to get the primitive data type of a certain String.
Explain the following line used under Java Program:
public static void main (String args[ ])
The following shows the explanation individually:

• public: it is the access specifier.
• static: it allows main() to be called without instantiating a particular instance of a class.
• void: it affirms the compiler that no value is returned by main().
• main(): this method is called at the beginning of a Java program.
• String args[ ]: args parameter is an instance array of class String
Define JRE i.e. Java Runtime Environment?
Java Runtime Environment is an implementation of the Java Virtual Machine which executes Java programs. It provides the minimum requirements for executing a Java application;
What is JAR file?
JAR files is Java Archive fles and it aggregates many files into one. It holds Java classes in a library. JAR files are built on ZIP file format and have .jar file extension.
What is a WAR file?
This is Web Archive File and used to store XML, java classes, and JavaServer pages. which is used to distribute a collection of JavaServer Pages, Java Servlets, Java classes, XML files, static Web pages etc.
Define JIT compiler??
It improves the runtime performance of computer programs based on bytecode.
What is the difference between object oriented programming language and object based programming language?
Object based programming languages follow all the features of OOPs except Inheritance. JavaScript is an example of object based programming languages
How many bits are used to represent Unicode, ASCII, UTF-16, and UTF-8 characters?
Unicode requires 16 bits and ASCII require 7 bits. Although the ASCII character set uses only 7 bits, it is usually represented as 8 bits. UTF-8 represents characters using 8, 16, and 18 bit patterns. UTF-16 uses 16-bit and larger bit patterns.


 Which Java operator is right associative?
The = operator is right associative.
 What is the difference between a break statement and a continue statement?
A break statement results in the termination of the statement to which it applies (switch, for, do, or while). A continue statement is used to end the current loop iteration and return control to the loop statement
If a variable is declared as private, where may the variable be accessed?
A private variable may only be accessed within the class in which it is declared..
What is the purpose of the System class?
The purpose of the System class is to provide access to system resources.
What is dot operator?
The dot operator(.) is used to access the instance variables and methods of class objects.It is also used to access classes and sub-packages from a package.
What is type casting?
Type casting means treating a variable of one type as though it is another type.
What is the difference between the >> and >>> operators?
The >> operator carries the sign bit when shifting right. The >>> zero-fills bits that have been shifted out
What is the range of the short type?
The range of the short type is -(2^15) to 2^15 - 1.
Does Java allow Default Arguments?
No, Java does not allow Default Arguments.
Which number is denoted by leading zero in java?
Octal Numbers are denoted by leading zero in java
Which number is denoted by leading 0x or 0X in java?
Hexadecimal Numbers are denoted by leading 0x or 0X in java
 Break statement can be used as labels in Java?
Yes, an example can be break one
What environment variables do I need to set on my machine in order to be able to run Java programs?
CLASSPATH and PATH are the two variables.
 Is there any need to import java.lang package?
No, there is no need to import this package. It is by default loaded internally by the JVM.
What is Nested top-level class?
If a class is declared within a class and specify the static modifier, the compiler treats the class just like any other top-level class. Nested top-level class is an Inner class.
Can you differentiate between J2SDK 1.5 and J2SDK 5.0?
There is no difference between J2SDK 1.5 and J2SDK 5.0. Sun Microsystems has just rebranded the versions.
Can you name a few platforms that support Java?
Yes, Java is supported by Windows, Mac as well as UNIX/Linux like Ubuntu, Red Hat and Sun Solaris.
Can you tell me the number of bits used to represent Unicode, ASCII, UTF-16, and UTF-8 characters?
For Unicode 16 bits and ASCII needs 7 bits. However, ASCII is usually represented as 8 bits. UTF-8 presents characters through 8, 16 and 18 bit pattern. UTF-16 will require 16-bit and larger bit patterns.
Can a .java file support more than one java classes?
Yes, it can support more than one Java classes in a condition where one of them is a public class.
What is the use of File Class?
It helps in accessing files and directories of a local system.
Does Java support Default arguments?
No, it does not support
How is Java source code files named?
Java source code file takes the name of a public class or interface that is defined by the programmer while coding within the file. Source code file may contain maximum one public class or interface in the file. Two cases me occur while naming of the java source code file:

•	When public class or interface is defined within a source code file then the java source code file must take the name of the public class or interface defined while coding. 

•	When no public class or interface is defined inside a source code file, then the java source code file take a name that is different than its classes and interfaces. Source code files use the .java extension.
What are the types of casting?
There are two types of casting:

•	Casting between primitive numeric types, and 

•	Casting between object references.

Casting between numeric types is used to convert larger values, like double values, to smaller values, such as byte values. Casting between object references is used to refer to an object by a compatible class, interface, or array type reference.
 Describe what happens when an object is created in Java.
Several things happen in a particular order to ensure the object is constructed properly:

1. Memory allocation: To hold all instance variables and implementation-specific data of the object and its super classes.

2. Initialization: the objects are initialized to their default values.

3. Constructor: Constructors call the constructors for its super classes. This process continues until the constructor for java.lang.Object is called, as java.lang.Object is the base class for all objects in java.

4. Execution: Before the body of the constructor is executed all instance variable initializes and initialization blocks must get executed. Then the body of the constructor is executed.
 Define local, member and a class variable.
• Within a method variables declared are called “local” variables. 

• Variables declared in the class i.e not in any methods are “member” variables (global variables). 

• Variables declared in the class i.e not in any methods and are called as “static” are class variables
Differentiate between JDK ,JRE & JVM
• JDK stands for Java Development Kit. 
It is the most widely used Java Software Development Kit. 
• JRE stands for Java Runtime Environment
It is an implementation of the Java Virtual Machine which executes Java programs
• JVM stands for Java Virtual Machine 
It is an interpreter.
Differentiate JAR and WAR files
JAR files:
• JAR files is the acronym stands for Java ARchive fles. 
• JAR files allow aggregating many files into one.
• JAR is usually used to hold Java classes in a library.

WAR files:
• WAR files is the acronym stands for Web ARchive fles.
• WAR stores XML, java classes, and JavaServer pages 
• WAR is mainly used for Web Application purposes.

An object is resurrected by making other object refer to the dying object in finalize method. Will this object be ever garbage collected?
Resurrection can happen in finalize method which will prevent GC to reclaim the object memory. However this could be done only once. Next time GC will not invoke finalize method before garbage collection?
 A class without a method can be run by JVM if its ancestor class has main. True/False?
Exception in finalize method doesn't prevent GC.
What is the rule regarding overriding methods throwing exceptions?
Overriding method can not throw more generic exception than base method.
Which ones are classes and which ones are interfaces? a. InputStream, OutputStream b. DataInputStream, DataOutputStream
a. Abstract Class b. Interface
What are the different types of inner classes?
An inner class is part of the implementation of its enclosing class (or classes). As such, it has access to the private members of any enclosing class. Top-level nested classes are declared with static keyword. Top level inner classes can be accessed / instantiated without an instance of the outer class. Can access only static members of outer class. Can’t access instance variables or methods of the enclosing class. Non static inner classes which are declared without static keyword can not exist without enclosing class. Can access all the features (even private) of the enclosing outer class. Local classes are defined inside a block (could be a method, a constructor, a local block, a static initializer or an instance initializer). Cannot be specified with static modifier. A class can not have non static inner interface. All inner class except anonymous can be abstract or final.
Can a class implement two interfaces with same variable names.
If both the interface have same variable and the variable is not declared in implementing class , the compiler will throw ´field ambiguous “ error.
Dictionary is an interface or class?
Dictionary is a class not an interface.
Member variables are resolved compiletime or runtime?
Compile Time
Write an nearest equivalent of size operator in C. (Hint: Use Runtime class)
Static Runtime runtime=Runtime.getRuntime();
    long start,end;
    Object obj;
    runtime.gc();
    start=runtime.freememory();
    obj=new object();
    end= Runtime.freememory();
    System.out.println(“size of obj”+ (start-end)+ “ bytes”);
[Note: Since GC can't be enforced in java the result is not always predictable.]
Can we override variables?
    class S1{
    public string S= “ S1”;
    public string gets() {
    returns S;
    }
    }
    class S2 extend S1 {
    public string S = “ S2”;
    public string gets() {
    return S;
    }
    }
    public class shadow{
    public static void main(String S[]) {
    S1 s1 = new S1();
    S2 s2= new S2();
    System.out.println("Print S1 " + s1.s);
    System.out.println("Print S1 " + s2.s);
    s1=s2;
    System.out.println("Print S1 now " + s1.S) ;
    System.out.println( "Print s1.gets() now " + s1.gets());
    }
    }
Which one throws arithmetic exception: a. int i = 100/0; b. float f = 100.00/0.0
b. [float f = 100.00/0.0. Float division by zero returns NAN (not a number) instead of exception.]
 If an overridden method calls super class method which access class member variable, which variable will be used base class or super class.
 class S1 {
    string S= “ S1”;
    public string gets (){
     return S;
    }
    void display () {
     System.out.println("Display in S1 " + S);
    }
    }
    class S2 extends S1{
    string S= “ S2”;
    void display(){
    super.display();
    System.out.println("Display in S2 " +S);
    }
    }
    public class shadow 2 {
    string s =” base”;
    public static void main(String s[]) {
    S2 s2=new S2();
    S2.display ();
    S1 s1=new S1();
    System.out.println("Print S1 " + s1.gets());
    System.out.println("Print S2 " + s2.gets());
    }
}
Map implements collection. True/False?
Map doesn't implement collection.
Can a class implement two interfaces which has got methods with same name and signatures?
Yes.
Which one of these statements are valid? 1.	Char \u0061r a =’a’; 2.	Char \u0062 = ’b’; 3.	Char c =’\u0063’; a) 1 b) 2 c) 3 d) ALL e) NONE
d) ALL
 Which one is faster in java ? a. Math.max(a,b); b. (a>b)?a:b
b. (a>b)?a:b
Is the following statement correct: char ch = 'd'; if(ch < 32.00){ }
Correct
What will be output from the following statements: a. System.out.println(1+2+”3”); b. System.out.println (“1”+2+3);
a: 33 b: 123
Can an interface be final?
Interface cannot be declared final as they are implicitly abstract.
Does the finalize method in subclass invoke finalize method in super class?
Finalize is not implicitly chained. A finalize method in sub-class should call finalize in super class explicitly as its last action for proper functioning . Compilers does not enforce this check.
Can we have static method in interface?
All methods in an inter face are implicitly public, abstract and never static.
What is the use of volatile variable?
Volatile can be applied only to variables. Not for static or final. Declaring a variable volatile indicates that it might be modified asynchronously, so that thread will get correct value. Used in multi processor environment.
Can an interface have variables? Can these variables be transient?
All variables in an interface are implicitly static , public and final. They cannot be transient or volatile. A class can shadow the interface variable with its variable while implementing.
What is the use of transient variable? Can a transiant variable be static?
Transient variables are not stored as objects persistence state .Not serialized for security. Transient variables may not be final or static . Compilers does not give any errors as static variables are anyway not serialized.


 Which one is faster in java ?
a.	for(int i = 100000; i > 0; i--)
          {
          }
             b.	for(int i = 1; i < 100001; i++)
          {
          }
 Is Array operations are faster or of Vector?
Array
MyClass.java and empty file is valid source file. True/False?
True.
If you have reference variable of parent class type and you assign a child class object to that variable and invoke static method. Which method will be invoked? Parent/Child.?
Parent
Can circular reference prevent an object to be GCed?
No.
What will be the value of Point p after methods in a and b if the value before method call is (700,800)?
a.	static void changePoint ( Point p) {
              p.x = 100; p.y=200;
               }
              b.	static void changePoint(Point p) {
          p=new Point(100,200);
               }
Which one of these primitive types are unsigned? a. int b. long c. char d. double e. float
c. char (All numeric data types are signed .char is the only unsigned integer type.)
A class without a method can be run by JVM if its ancestor class has main. True/False?
True
Local variables can not be declared static or final or transient .True/False?
True.
If there is an exception in finalize method, will the object be garbage collected?
Can inner class have static members? Yes/No
No.
Can constructor throw exception?
Yes.[Constructor can throw exception.]
 What is the rule regarding overriding methods throwing exceptions?
Overriding method can not throw more generic exception than base method.
Does File class have any method to read or write content in a file? Yes/No
No.
Which one is not correct a. x = = Float.NaN b. Float.isNan(x); c. Myobject .equals(float.NaN);
a. x = = Float.NaN
Can finalize method be overloaded?
Yes but only the following version is called by garbage collector:
protected void finalize() throws Throwable { };
Array whether local or class levels are always initialized. True/False?
True
Nested classes can extend only the enclosing class and can not implement any interface? True/False
False. [Nested class can extend any class or implement any interface.]
 Can we declare derived class first and then base class in java?
Yes
GC is a high priority thread. True/False?
False. [GC is a low priority thread.]
Can we cast two derived class for each other, both having same parent class. Yes/No
No
Final variables declared without initialization can be initialized in static initializer ( static final var) or in constructor( final var). True/False?
True. [but at most once.]
Dictionary is an interface or class?
Dictionary is a class not an interface.
Member variables are resolved compiletime or runtime?
Compile Time
 Map implements collection. True/False?
Map doesn't implement collection.
Can a class implement two interfaces which has got methods with same name and signatures?
Yes.
Which one of these statements are valid? 1.	Char \u0061r a =’a’; 2.	Char \u0062 = ’b’; 3.	Char c =’\u0063’; a) 1 b) 2 c) 3 d) ALL e) NONE
d. ALL
Which one is faster in java ? a. Math.max(a,b); b. (a>b)?a:b
b. (a>b)?a:b
Is the following statement correct: char ch = 'd'; if(ch < 32.00){ }
Correct
What will be output from the following statements: a. System.out.println(1+2+”3”); b. System.out.println (“1”+2+3);
a: 33 b: 123
Random access file extends from File. True/False?
False [ Random access file descends from object and implements data input and data output.]
Can an interface be final?
Interface cannot be declared final as they are implicitly abstract.
Can we have static method in interface?
All methods in an inter face are implicitly public, abstract and never static.
Java supports both multi dimension and nested arrays? True/False
False [Java doesn't support multi dimension arrays. It supports only nested arrays.]
 public static final main(String[] args)
      {
      }
is a valid method. True/False?
public main(int number) { } is a valid method? True/False?
True


What is Garbage Collection in Java?
* Garbage Collection is an automatic memory management feature.
* The process of destroying unreferenced objects is called Garbage Collection.
* Once object is unreferenced it is considered as unused object, hence JVM automatically destroys that object.
* In java developers responsibility is only to creating objects and unreferencing those objects after usage.
Can we force garbage collector?
No, we can not force garbage collector to destroy objects , but we can request it.
How JVM can destroy unreferenced object?
* JVM internally uses a daemon thread called "garbage collector" to destroy all unreferenced objects.
* A daemon thread is a service thread. Garbage Collector thread is called daemon thread because it provides services to JVM to destroy unreferenced objects.
* This thread is low priority thread. Since it is a low priority thread we can not guarantee this execution.
So can you guarantee objects destruction?
* No, we can not guarantee objects destruction even though it is unreferenced, because we can not guarantee garbage collector execution.
* So, we can confirm whether object is eligible for garbage collection or not.
Explain Java Garbage Collection in detail?
Java Garbage Collection is the process to identify and remove the unused objects from the memory and free space to be allocated to objects created in the future processing. One of the best feature of java programming language is the automatic garbage collection, unlike other programming languages such as C where memory allocation and deallocation is a manual process. 

Garbage Collector is the program running in the background that looks into all the objects in the memory and find out objects that are not referenced by any part of the program. All these unreferenced objects are deleted and space is reclaimed for allocation to other objects. 

One of the basic way of garbage collection involves three steps: 

1:Marking: This is the first step where garbage collector identifies which objects are in use and which ones are not in use.
2:Normal Deletion: Garbage Collector removes the unused objects and reclaim the free space to be allocated to other objects.
3:Deletion with Compacting: For better performance, after deleting unused objects, all the survived objects can be moved to be together. This will increase the performance of allocation of memory to newer objects. 

There are two problems with simple mark and delete approach.

1:First one is that it’s not efficient because most of the newly created objects will become unused
2:Secondly objects that are in-use for multiple garbage collection cycle are most likely to be in-use for future cycles too. 

The above shortcomings with the simple approach is the reason that Java Garbage Collection is Generational and we have Young Generation and Old Generation spaces in the heap memory. I have already explained above how objects are scanned and moved from one generational space to another based on the Minor GC and Major GC.
 Which part of the memory is involved in Garbage Collection?
Heap.
How can we request JVM to start garbage collection process?
* We have a method called gc() in system class as static method and also in Runtime class as non static method to request JVM to start garbage collector execution.
* System.gc();
* Runtime.getRuntime().gc();
 What is the algorithm JVM internally uses for destroying objects?
"mark and swap" is the algorithm JVM internally uses.
What is responsibility of Garbage Collector?
* Garbage Collector frees the memory occupied by the unreachable objects during the java program by deleting these unreachable objects.
* It ensures that the available memory will be used efficiently, but does not guarantee that there will be sufficient memory for the program to run.
When does an object become eligible for garbage collection?
An object becomes eligible for garbage collection when no live thread can access it.
How many times does the garbage collector calls the finalize() method for an object?
Only once.
How to enable /disable call of finalize() method of exit of application?
Runtime.getRuntime().runFinalizersOnExit(boolean value). passing the boolean value true and false will enable or disable the finalize() call.
What happens if an uncaught exception is thrown from during the execution of finalize() method of an object?
The exception will be ignored and the garbage collection (finalization) of that object terminates
What are the different ways to call garbage collector?
System.gc();
Runtime.getRuntime().gc();
Java Garbage Collection Types
There are five types of garbage collection types that we can use in our applications. We just need to use JVM switch to enable the garbage collection strategy for the application. Let’s look at each of them one by one. 

Serial GC (-XX:+UseSerialGC):
Serial GC uses the simple mark-sweep-compact approach for young and old generations garbage collection i.e Minor and Major GC. Serial GC is useful in client-machines such as our simple stand alone applications and machines with smaller CPU. It is good for small applications with low memory footprint. 

Parallel GC (-XX:+UseParallelGC):
Parallel GC is same as Serial GC except that is spawns N threads for young generation garbage collection where N is the number of CPU cores in the system. We can control the number of threads using -XX:ParallelGCThreads=n JVM option. Parallel Garbage Collector is also called throughput collector because it uses multiple CPUs to speed up the GC performance. Parallel GC uses single thread for Old Generation garbage collection. 

Parallel Old GC (-XX:+UseParallelOldGC):
This is same as Parallel GC except that it uses multiple threads for both Young Generation and Old Generation garbage collection. 

Concurrent Mark Sweep (CMS) Collector (-XX:+UseConcMarkSweepGC):
CMS Collector is also referred as concurrent low pause collector. It does the garbage collection for Old generation. CMS collector tries to minimize the pauses due to garbage collection by doing most of the garbage collection work concurrently with the application threads. CMS collector on young generation uses the same algorithm as that of the parallel collector. This garbage collector is suitable for responsive applications where we can’t afford longer pause times. We can limit the number of threads in CMS collector using -XX:ParallelCMSThreads=n JVM option. 

G1 Garbage Collector (-XX:+UseG1GC):
The Garbage First or G1 garbage collector is available from Java 7 and it’s long term goal is to replace the CMS collector. The G1 collector is a parallel, concurrent, and incrementally compacting low-pause garbage collector. Garbage First Collector doesn’t work like other collectors and there is no concept of Young and Old generation space. It divides the heap space into multiple equal-sized heap regions. When a garbage collection is invoked, it first collects the region with lesser live data, hence “Garbage First”. You can find more details about it at Garbage-First Collector Oracle Documentation.
List any five features of Java?
All the Garbage Collections are “Stop the World” events because all application threads are stopped until the operation completes. 

Since Young generation keeps short-lived objects, Minor GC is very fast and the application doesn’t get affected by this. 

However Major GC takes longer time because it checks all the live objects. Major GC should be minimized because it will make your application unresponsive for the garbage collection duration. So if you have a responsive application and there are a lot of Major Garbage Collection happening, you will notice timeout errors. 

The duration taken by garbage collector depends on the strategy used for garbage collection. That’s why it’s necessary to monitor and tune the garbage collector to avoid timeouts in the highly responsive applications.


What is an immutable class?
Immutable class is a class which once created, it’s contents can not be changed. Immutable objects are the objects whose state can not be changed once constructed. e.g. String class .
How to create an immutable class?
To create an immutable class following steps should be followed: 

1.Create a final class.
2.Set the values of properties using constructor only.
3.Make the properties of the class final and private
4.Do not provide any setters for these properties.
5.If the instance fields include references to mutable objects, don't allow those objects to be changed:
1.Don't provide methods that modify the mutable objects.
2.Don't share references to the mutable objects. Never store references to external, mutable objects passed to the constructor; if necessary, create copies, and store references to the copies. Similarly, create copies of your internal mutable objects when necessary to avoid returning the originals in your methods. 

public final class FinalPersonClass
{
private final String name;
private final int age;
public FinalPersonClass(final String name, final int age)
{
this.name = name;
this.age = age;
}
public int getAge()
{
return age;
}
public String getName()
{
return name;
}
}
Immutable objects are automatically thread-safe –true/false?
True. Since the state of the immutable objects can not be changed once they are created they are automatically synchronized/thread-safe.
Which classes in java are immutable?
All wrapper classes in java.lang are immutable – String, Integer, Boolean, Character, Byte, Short, Long, Float, Double, BigDecimal, BigInteger
What are the advantages of immutability?
• Immutable objects are automatically thread-safe, the overhead caused due to use of synchronisation is avoided. 

• Once created the state of the immutable object can not be changed so there is no possibility of them getting into an inconsistent state. 

• The references to the immutable objects can be easily shared or cached without having to copy or clone them as there state can not be changed ever after construction. 

• The best use of the immutable objects is as the keys of a map. .
Immutable Class Example in Java
Here is complete code example of writing immutable class in Java. We have followed simplest approach and all rules for making a class immutable, including it making class final to avoid putting immutability at risk due to Inheritance and Polymorphism.
public final class Contacts
{

private final String name;
private final String mobile;

public Contacts(String name, String mobile)
{
this.name = name;
this.mobile = mobile;
}

public String getName()
{
return name;
}

public String getMobile()
{
return mobile;
}
}.
Give an example of Immutable Class ?
This Java class is immutable, because its state can not be changed once created. You can see that all of it’s fields are final. This is one of the most simple way of creating immutable class in Java, where all fields of class also remains immutable like String in above case. Some time you may need to write immutable class which includes mutable classes like java.util.Date, despite storing Date into final field it can be modified internally, if internal date is returned to the client. In order to preserve immutability in such cases, its advised to return copy of original object, which is also one of the Java best practice. here is another example of making a class immutable in Java, which includes mutable member variable.
public final class ImmutableReminder
{
private final Date remindingDate;

public ImmutableReminder (Date remindingDate) {
if(remindingDate.getTime() < System.currentTimeMillis())
{
throw new IllegalArgumentException("Can not set reminder” +
“ for past time: " + remindingDate);
}
this.remindingDate = new Date(remindingDate.getTime());
}

public Date getRemindingDate() {
return (Date) remindingDate.clone();
}
}
What is Advantages of using Immutable class
• Thread safe - Immutable classes are thread safe, they will never create race condition. 

• Key in HashMap - Immutable classes are can be used as key in Map (HashMap etc.) 

• HashCode is cached - JVM caches the HashCode of Immutable classes used in application. JVM need not to calculate hashcode again. Hence, performance of application is improved significantly. 

• If Immutable class throws Exception - If Immutable class throws Exception, they are never left in undesirable state.
Benefits of Immutable Classes in Java
As I said earlier Immutable classes offers several benefits, here are few to mention: 

1) Immutable objects are by default thread safe, can be shared without synchronization in concurrent environment. 

2) Immutable object simplifies development, because its easier to share between multiple threads without external synchronization. 

3) Immutable object boost performance of Java application by reducing synchronization in code. 

4) Another important benefit of Immutable objects is reusability, you can cache Immutable object and reuse them, much like String literals and Integers. You can use static factory methods to provide methods like valueOf(), which can return an existing Immutable object from cache, instead of creating a new one. .


What are different type of cloning in Java?
Java supports two type of cloning: - Deep and shallow cloning. By default shallow clone is used in Java. Object class has a method clone() which does shallow cloning.
 What is Shallow copy?
Shallow clone is a copying the reference pointer to the object, which mean the new object is pointing to the same memory reference of the old object. The memory usage is lower. 
Original java object obj

The shallow copy is done for obj and new object obj1 is created but contained objects of obj are not copied. 
Shallow copy object obj1

It can be seen that no new objects are created for obj1 and it is referring to the same old contained objects. If either of the containedObj contain any other object no new reference is created.
What is deep copy and how it can be achieved?
n deep copy is the copy of object itself. A new memory is allocated for the object and contents are copied. 
Original java object obj
When a deep copy of the object is done new references are created.
obj2 is deep copy of obj1
One solution is to simply implement your own custom method (e.g., deepCopy()) that returns a deep copy of an instance of one of your classes. This may be the best solution if you need a complex mixture of deep and shallow copies for different fields, but has a few significant drawbacks: 

• You must be able to modify the class (i.e., have the source code) or implement a subclass. If you have a third-party class for which you do not have the source and which is marked final, you are out of luck. 

• You must be able to access all of the fields of the classe's superclasses. If significant parts of the object's state are contained in private fields of a superclass, you will not be able to access them. 

• You must have a way to make copies of instances of all of the other kinds of objects that the object references. This is particularly problematic if the exact classes of referenced objects cannot be known until runtime. 

• Custom deep copy methods are tedious to implement, easy to get wrong, and difficult to maintain. The method must be revisited any time a change is made to the class or to any of its superclasses. 

Other common solution to the deep copy problem is to use Java Object Serialization (JOS). The idea is simple: Write the object to an array using ObjectOutputStream and then use ObjectInputStream to reconsistute a copy of the object. The result will be a completely distinct object, with completely distinct referenced objects. JOS takes care of all of the details: superclass fields, following object graphs, and handling repeated references to the same object within the graph. 

• It will only work when the object being copied, as well as all of the other objects references directly or indirectly by the object, are serializable. (In other words, they must implement java.io.Serializable.) Fortunately it is often sufficient to simply declare that a given class implements java.io.Serializable and let Java's default serialization mechanisms do their thing. Java Object Serialization is slow, and using it to make a deep copy requires both serializing and deserializing. 

There are ways to speed it up (e.g., by pre-computing serial version ids and defining custom readObject() and writeObject() methods), but this will usually be the primary bottleneck. The byte array stream implementations included in the java.io package are designed to be general enough to perform reasonable well for data of different sizes and to be safe to use in a multi-threaded environment. These characteristics, however, slow down ByteArrayOutputStream and (to a lesser extent) ByteArrayInputStream . p>
What is difference between deep and shallow cloning?
The differences are as follows:
Consider a class:
public class MyData
{
String id;
Map myData;
}
The shallow copying of this object will be pointing to the same memory reference as the original object. So a change in myData by either original or cloned object will be reflected in other also. But in deep copying there will memory allocated and values assigned to the property will be same. Any change in object will not be reflected in other.

Shallow copying is default cloning in Java which can be achieved using Object.clone() method of Object class. For deep copying override the clone method to create new object and copy its values.
What are disadvantages of deep cloning ?
Disadvantages of using Serialization to achieve deep cloning – 

• Serialization is more expensive than using object.clone(). 

• Not all objects are serializable. 

• Serialization is not simple to implement for deep cloned object..

What is Generics in Java ? What are advantages of using Generics?
This is one of the first interview questions asked on generics in any Java interview, mostly at beginners and intermediate level. Those who are coming from prior to Java 5 background knows that how inconvenient it was to store object in Collection and then cast it back to correct Type before using it. Generics prevents from those. it provides compile time type-safety and ensures that you only insert correct Type in collection and avoids ClassCastException in runtime.
 What is difference between List < ? extends T > and List < ? super T > ?
This is related to previous generics interview questions, some time instead of asking what is bounded and unbounded wildcards interviewer present this question to gauge your understanding of generics. Both of List declaration is example of bounded wildcards, List< ? extends T > will accept any List with Type extending T while List< ? super T > will accept any List with type super class of T. for Example List< ? extends Number > can accept List or List. see more on above link.
How Generics works in Java ? What is type erasure ?
This is one of better interview question in Generics. Generics is implemented using Type erasure, compiler erases all type related information during compile time and no type related information is available during runtime. for example List is represented by only List at runtime. This was done to ensure binary compatibility with the libraries which were developed prior to Java 5. you don't have access to Type argument at runtime and Generic type is translated to Raw type by compiler during runtime. you can get lot of follow up question based on this Generic interview question based upon your response e.g. Why Generics is implemented using Type erasure or presenting some invalid generic code which results in compiler error. read my post How Generics works in Java for more details .
What is Bounded and Unbounded wildcards in Generics ?
This is another very popular Java interview questions on Generics. Bounded Wildcards are those which impose bound on Type. there are two kinds of Bounded wildcards < ? extends T > which impose an upper bound by ensuring that type must be sub class of T and < ? super T > where its imposing lower bound by ensuring Type must be super class of T. This Generic Type must be instantiated with Type within bound otherwise it will result in compilation error. On the other hand < ? > represent and unbounded type because < ? > can be replace with any Type. See more on my post differences between Bounded and Unbounded wildcards in Generics.
Can you pass List to a method which accepts List < Object >
This generic interview question in Java may look confusing to any one who is not very familiar with Generics as in fist glance it looks like String is object so List can be used where List< Object > is required but this is not true. It will result in compilation error. It does make sense if you go one step further because List< Object > can store any any thing including String, Integer etc but List can only store Strings.
List< Object > objectList;
List stringList;
objectList = stringList; //compilation error incompatible types
How to write a generic method which accepts generic argument and return Generic Type ?
writing generic method is not difficult, instead of using raw type you need to use Generic Type like T, E or K,V which are well known placeholders for Type, Element and Key, Value. Look on Java Collection framework for examples of generics methods. In simplest form a generic method would look like:


public V put(K key, V value)
{
return cache.put(key, value);
}
How to write parametrized class in Java using Generics ?
This is an extension of previous Java generics interview question. Instead of asking to write Generic method Interviewer may ask to write a type safe class using generics. again key is instead of using raw types you need to used generic types and always use standard place holder used in JDK.
 Write a program to implement LRU cache using Generics ?
This is an exercise for anyone who like Coding in Java. One hint is that LinkedHashMap can be used implement fixed size LRU cache where one needs to remove eldest entry when Cache is full. LinkedHashMap provides a method called removeEldestEntry() which is called by put() and putAll() and can be used to instruct to remove eldest entry. you are free to come up with your own implementation as long as you have a written a working version along with JUnit test.
Difference between List < Object > and raw type List in Java?
Main difference between raw type and parametrized type List< Object > is that, compiler will not check type-safety of raw type at compile time but it will do that for parametrized type and by using Object as Type it inform compiler that it can hold any Type of Object e.g. String or Integer. This Java Generics interview question is based on correct understanding of raw type in Generics. Any way second difference between them is that you can pass any parametrized type to raw type List but you can not pass List to any method which accept List< Object > it will result in compilation error. Read How Generics works in Java for more details.
Difference between List< ? > and List < Object > in Java?
This generics interview question may look related to previous interview questions but completely different. List< ? > is List of unknown type while List< Object > is essentially List of any Type. You can assign List , List to List< ? > but you can not assign List to List< Object >.
List< ?> listOfAnyType;
List< Object > listOfObject = new ArrayList< Object >();
List< String > listOfString = new ArrayList< String >();
List< Integer > listOfInteger = new ArrayList< Integer >();
listOfAnyType = listOfString; //legal
listOfAnyType = listOfInteger; //legal
listOfObjectType = (List< Object>) listOfString; //compiler error - in-convertible types
How can you suppress unchecked warning in Java ?
javac compiler for Java 5 generates unchecked warnings if you use combine raw types and generics types e.g.
List rawList = new ArrayList()
Note: Hello.java uses unchecked or unsafe operations.;
which can be suppressed by using @SuppressWarnings("unchecked") annotation.
Difference between List and raw type List.
This Generics interview question is similar to difference between raw type and parametrized type.Parametrized type are type-safe and type-safety will be guaranteed by compiler but List raw type is not type safe. You can not store any other Object on List of String but you can not store any Object in raw List. There is no casting required in case of Parametrized type with Generics but explicit casting will be needed for raw type.
List listOfRawTypes = new ArrayList();
listOfRawTypes.add("abc");
listOfRawTypes.add(123); //compiler will allow this - exception at runtime
String item = (String) listOfRawTypes.get(0); //explicit cast is required
item = (String) listOfRawTypes.get(1); //ClassCastException because Integer can not be cast in String

List listOfString = new ArrayList();
listOfString.add("abcd");
listOfString.add(1234); //compiler error, better than runtime Exception
item = listOfString.get(0); //no explicit casting is required - compiler auto cast
These were some of the frequently asked generics interview questions and answers in Java. None of these generic interview questions are tough or hard, Indeed they are based on fundamental knowledge of generics. Any Java programmer who has decent knowledge of Generics must be familiar with these generics questions in Java. If you have any other good generic question which has been asked in any interview or you are looking answer for any Generics interview question in Java then please post in comment section.



What is the use of final keyword?
The final keyword can be assigned to 

1. Class level variable
2. method
3. class
4. Objects


If a final is assigned to a variable, the variable behaves as a constant. It means that the value of variable once set cannot be changed. 
final int i = 1;
i = 5; // error

If a final is assigned to a method then it cannot be overridden in its child class.

class Parent
{
final void print()
{
System.out.println("Inside");
}
}
class Child extends Parent
{
public final void print()
{
// error cannot override final method
System.out.println("Inside");
}
}
If a class is made as final, then no other class can extend it and make it as parent class. E.g. String Class.


Final objects are instantiated only once. i.e

final Map map = new HashMap();
map.put("key";,"value");
map = new HashMap(); // error
What are different types of access modifiers in Java?
There are four different types of modifiers: 
MODIFER	ACCESSIBLE IN THE SAME PACKAGE	ACCESSIBLE IN DIFFERENT PACKAGE
Private	No	No
Protected	Yes	Yes, only if the class extends the main class
Default	Yes	No
Public	Yes	Yes
What is use of synchronized keyword?
This keyword is used to prevent concurrency. Synchronized keyword can be applied to static/non-static methods or a block of code. Only one thread at a time can access synchronized methods and if there are multiple threads trying to access the same method then other threads have to wait for the execution of method by one thread. Synchronized keyword provides a lock on the object and thus prevents race condition. E.g. 
public void synchronized method(){}
public void synchronized staticmethod(){}
public void myMethod()
{
synchronized (this){ // synchronized keyword on block of code
}
}
 What is volatile keyword?
In general each thread has its own copy of variable, such that one thread is not concerned with the value of same variable in the other thread. But sometime this may not be the case. Consider a scenario in which the count variable is holding the number of times a method is called for a given class irrespective of any thread calling, in this case irrespective of thread access the count has to be increased. In this case the count variable is declared as volatile. The copy of volatile variable is stored in the main memory, so every time a thread access the variable even for reading purpose the local copy is updated each time from the main memory. The volatile variable also have performance issues.
What is a transient variable?
If some of the properties of a class are not required to be serialized then the varaibles are marked as transient. When an object is deserialized the transient variables retains the default value depending on the type of variable declared and hence lost its original value.
What is a strictfp modifier?
Strictfp is used with variable only . It is used to restrict floating point calculations ( fp ) to ensure portability ( platform Independent ). When this modifier is specified, the JVM adheres to the Java specifications ( IEEE-754 floating-point specification ) and returns the consistent value independent of the platform. That is, if you want the answers from your code (which uses floating point values) to be consistent in all platforms, then you need to specify the strictfp modifier. .
What is a static variable?
Static keyword can be used with the variables and methods but not with the class. Anything declared as static is related to class and not objects. 

Static variable : Multiples objects of a class shares the same instance of a static variable.Consider the example:
public class Counter
{
private static int count=0;
private int nonStaticcount=0;
public void incrementCounter()
{
count++;
nonStaticcount++;
}
public int getCount()
{
return count;
}
public int getNonStaticcount(
{
return nonStaticcount;
}
public static void main(String args[])
{
Counter countObj1 = new Counter();
Counter countObj2 = new Counter();
countObj1.incrementCounter();
countObj2.incrementCounter();
System.out.println("Static count for Obj1: "+countObj1.getCount());
System.out.println("NonStatic count for Obj1: "+countObj1.getNonStaticcount());
System.out.println("Static count for Obj2: "+countObj2.getCount())
System.out.println("NonStatic count for Obj2: "+countObj2.getNonStaticcount())
}

Output
Static count for Obj1: 2
NonStatic count for Obj1: 1
Static count for Obj2: 2
NonStatic count for Obj2: 1

In the above program obj1 and obj2 share the same instance of static variable count hence if the value is incremented by one object , the incremented value will be reflected across the other objects.
What is a static method?
A method defined as static is called static method. A static method can be accessed without creating the objects. Just by using the Class name the method can be accessed. Static method can only access static variables and not local or global non-static variables. For eg:
public class Test
{
public static void printMe()
{
System.out.println("Hello World");
}
}
public class MainClass
{
public static void main(String args[])
{
Test.printMe()
}
}

OutPut:
Hello World
Also static method can call only static methods and not non static methods. But non-static methods can call static mehtods.
Why static methods cannot access non static variables or methods?
A static method cannot access non static variables or methods because static methods can be accessed without instantiating the class, so if the class is not instantiated the variables are not intialized and thus cannot be accessed from a static method.
What is static class ?
A class cannot be declared static. But a class can be said a static class if all the variables and methods of the class are static and the constructor is private. Making the constructor private will prevent the class to be instantiated. So the only possibility to access is using Class name only
What is throw keyword?
eThrow keyword is used to throw the exception manually. It is mainly used when the program fails to satisfy the given condition and it wants to warn the application.The exception thrown should be subclass of Throwable.
public void parent()
{
try{
child();
}
catch(MyCustomException e){ }
}
public void child
{
String iAmMandatory=null;
if(iAmMandatory == null)
{
throw (new MyCustomException("exception using throw keyword");
}
} 
What is use of throws keyword?
Throws clause is used to throw the exception from a method to the calling method which could decide to handle exception or throw to its calling method in a class.
public void parent()
{
try{
child();
}
catch(MyCustomException e){ }
}
public void child throws MyCustomException
{
//put some logic so that the exception occurs.
}


What is Polymorphism?
Polymorphism is the ability of an object to take on many forms. The most common use of polymorphism in OOP occurs when a parent class reference is used to refer to a child class object.
What is polymorphism in Java
Polymorphism is an Oops concept which advice use of common interface instead of concrete implementation while writing code. When we program for interface our code is capable of handling any new requirement or enhancement arise in near future due to new implementation of our common interface. If we don't use common interface and rely on concrete implementation, we always need to change and duplicate most of our code to support new implementation. Its not only Java but other object oriented language like C++ also supports polymorphism and it comes as fundamental along with other OOPS concepts like Encapsulation , Abstraction and Inheritance.
What is function overloading?
If a class has multiple functions by same name but different parameters, it is known as Method Overloading.
Difference between Overloading and Overriding?
Method overloading increases the readability of the program. Method overriding provides the specific implementation of the method that is already provided by its super class parameter must be different in case of overloading, parameter must be same in case of overriding.
What is Function Overriding and Overloading in Java ?
overloading in Java occurs when two or more methods in the same class have the exact same name, but different parameters. On the other hand, method overriding is defined as the case when a child class redefines the same method as a parent class. Overridden methods must have the same name, argument list, and return type. The overriding method may not limit the access of the method it overrides.
What is static member class?
A static member class behaves much like an ordinary top-level class, except that it can access the static members of the class that contains it. The static nested class can be accessed as the other static members of the enclosing class without having an instance of the outer class. The static class can contain non-static and static members and methods. 
public class InnerClass
{
static class StaticInner
{
static int i = 9;
int no = 6;
private void method() {}
public void method1() {}
static void method2() {}
final void method3() {}
}
}
The static inner class can be accessed from Outer Class in the following manner:

InnerClass.StaticInner staticObj= new InnerClass. StaticInner ();

No outer class instance is required to instantiate the nested static class because the static class is a static member of the enclosing class.
What are non static inner classes?
The different type of static inner classes are: Non - static inner classes – lasses associated with the object of the enclosing class. 

Member class - Classes declared outside a function (hence a "member") and not declared "static". The member class can be declared as public, private, protected, final and abstract. E.g. 

public class InnerClass
{
class MemberClass
{
public void method1() { }
}
}
Method local class – The inner class declared inside the method is called method local inner class. Method local inner class can only be declared as final or abstract. Method local class can only access global variables or method local variables if declared as final 

public class InnerClass
{
int i = 9;
public void method1()
{
final int k = 6;
class MethodLocal
{
MethodLocal()
{
System.out.println(k + i);
}
}
}
}


Anonymous inner class - These are local classes which are automatically declared and instantiated in the middle of an expression. Also, like local classes, anonymous classes cannot be public, private, protected, or static. They can specify arguments to the constructor of the superclass, but cannot otherwise have a constructor. They can implement only one interface or extend a class. 

public class MyFrame extends JFrame
{
JButton btn = new JButton();
MyFrame()
{
btn.addActionListener(new ActionListener()
{
public void actionPerformed(ActionEvent e) {}
});
}
}
//Anonymous class used with comparator
List l = new ArrayList();
l.add(new Parent(2));
l.add(new Parent(3));
Collections.sort(l, new Comparator()
{
public int compare(Object o1, Object o2)
{
Parent prt1 = (Parent) o1;
Parent prt2 = (Parent) o2;
if (prt1.getAge() > prt2.getAge())
{
return -1;
}
else if(prt1.getAge() {
return 1;
}
else
{
return 0;
}
}
});
Can a static nested class have access to the enclosing class non-static methods or instance variables?
No .
 What are the advantages of Inner classes?
The embedding of inner class into the outer class in the case when the inner class is to be used only by one class i.e. the outer class makes the package more streamlined. Nesting the inner class code where it is used (inside the outer class) makes the code more readable and maintainable. 

The inner class shares a special relationship with the outer class i.e. the inner class has access to all members of the outer class and still have its own type is the main advantages of Inner class. Advantage of inner class is that they can be hidden from the other classes in the same package and still have the access to all the members (private also) of the enclosing class. So the outer class members which are going to be used by the inner class can be made private and the inner class members can be hidden from the classes in the same package. This increases the level of encapsulation. 

If a class A is written requires another class B for its own use, there are two ways to do this. One way is to write a separate class B or to write an inner class B inside class A. Advantage of writing the inner class B in the class A is you can avoid having a separate class. Inner classes are best used in the event handling mechanism and to implement the helper classes. The advantage of using inner class for event handling mechanism is that the use of if/else to select the component to be handled can be avoided. If inner classes are used each component gets its own event handler and each event handler implicitly knows the component it is working for.
What are disadvantages of using inner classes?
• Using inner class increases the total number of classes being used by the application. For all the classes created by JVM and loaded in the memory, jvm has to perform some tasks like creating the object of type class. Jvm may have to perform some routine tasks for these extra classes created which may result slower performance if the application is using more number of inner classes. 

• Inner classes get limited support of ide/tools as compared to the top level classes, so working with the inner classes is sometimes annoying for the developer.
What are different types of anonymous classes?
Plain old anonymous class type one–

class superClass{
void doSomething() {
System.out.println(“Doing something in the Super class”);
}
}
class hasAnonymous{
superClass anon = new superClass(){
void doSomething() {
System.out.println(“Doing something in the Anonymous class”);
}
};
Here anon is the reference which is of type superClass which is the class extended by the anonymous class i.e. superclass of the anonymous class. The method doSomething() is the super class method overridden by the anonymous class.

Plain old anonymous class type two –
interface Eatable {
public void prepareSweets();
}
class serveMeal {
Eatable food = new Eatable(){
public void
prepareSweets(){ //come implementation code goes here
}
};
}


food is reference variable of type Eatable interface which refers to the anonymous class which is the implementer of the interface Eatable. The anonymous implementer class of the interface Eatable implements its method prepareSweets() inside it. 

Argument defined anonymous class –
interface Vehicle {
void getNoOfWheels();
}
class Car {
void getType(Vehical v) { }
}
class BeautifulCars
{
void getTheBeautifilCar()
{
Car c = new Car ();
c.getType (new Vehicle ()
{
public void getNoOfWheels ()
{
System.out.println("It has four wheels");
}
});
}
}

Anonymous class is defined as the argument of the method getTheBeautifilCar(), this anonymous class is the implementer of the interface Vehicle. The method of class Car getTheBeautifilCar() expects the argument as an object of type Vehicle. So first we create an object of Car referenced by the variable ‘c’. On this object of Car we call the method getTheBeautifilCar() and in the argument we create an anonymous class in place which is the implementer of interface Vehicle hence of type Vehicle
If you compile a file containing inner class how many .class files are created and what are all of them accessible in usual way?
If a inner class enclosed with an outer class is compiled then one .class file for each inner class an a .class file for the outer class is created. e.g. 

class EnclosingOuter
{
class Inner{ }
}

If you compile the above code with command

% javac EnclosingOuter.java


Two files are created will be created. Though a separate inner class file is generated, the inner class file is not accessible in the usual way. 
EnclosingOuter.class EnclosingOuter$Inner.class
How to access the inner class from code within the outer class?
The inner class is instantiated only through the outer class instance. 
class EnclosingOuter
{
private int noInnerClass = 1;
public void getNoOfInnerClasses()
{
Inner in = new Inner();
System.out.println("No Of Inner classes is :"+ in.getNoOfClassesFromOuter());
}
class Inner
{
public int getNoOfClassesFromOuter()
{ return noInnerClass;
}
}


Here the method getNoOfInnerClasses() is called on the outer class’s instance through this outer class instance the inner class instance in is created.
How Polymorphism supported in Java
Java has excellent support of polymorphism in terms of Inheritance, method overloading and method overriding. Method overriding allows Java to invoke method based on a particular object at run-time instead of declared type while coding. To get hold of concept let's see an example of polymorphism in Java: 

public class TradingSystem{
public String getDescription(){
return "electronic trading system";
}
}

public class DirectMarketAccessSystem extends TradingSystem{
public String getDescription(){
return "direct market access system";
}
}

public class CommodityTradingSystem extends TradingSystem{
public String getDescription(){
return "Futures trading system";
}
}


Here we have a super class called TradingSystem and there two implementation DirectMarketAccessSystem and CommodityTradingSystem and here we will write code which is flexible enough to work with any future implementation of TradingSystem we can achieve this by using Polymorphism in Java which we will see in further example.
Method overloading and method overriding in Java
Method overloading and method overriding uses concept of Polymorphism in Java where method name remains same in two classes but actual method called by JVM depends upon object at run time and done by dynamic binding in Java. Java supports both overloading and overriding of methods. In case of overloading method signature changes while in case of overriding method signature remains same and binding and invocation of method is decided on runtime based on actual object. This facility allows Java programmer to write very flexibly and maintainable code using interfaces without worrying about concrete implementation. One disadvantage of using Polymorphism in code is that while reading code you don't know the actual type which annoys while you are looking to find bugs or trying to debug program. But if you do Java debugging in IDE you will definitely be able to see the actual object and the method call and variable associated with it.
How to create an inner class instance from outside the outer class instance code?
To create an instance of the inner class you must have the instance of its enclosing class. 

class EnclosingOuter
{
class Inner{ }

}
To create the instance of inner class from class other than the enclosing class. 1) class OtherThanOuter
{
EnclosingOuter out = new EnclosingOuter();
EnclosingOuter.Inner in = out.new Inner();
}
2) class OtherThanOuter
{
EnclosingOuter.Inner out = new EnclosingOuter.Inner ();
}
Which modifiers can be applied to the inner class?
Which modifiers can be applied to the inner class?
Following are modifiers that can be applied to the inner: 

• public
• private
• abstract
• final
• protected
• strictfp
• static – turns the inner class into
• static nested class.
Can the method local inner class object access method’s local variables?
No, a method local inner class object can not access the method local variable. 

Reason: The local variables are not guaranteed to live as long as the local inner class object. The method local variable live on stack and exist only till the method lives, their scope is limited only code inside the method they are declared in. But the local inner class object created within the method lives on heap and it may exist even after the method ends if in case the reference of this local inner class is passed into some other code and is stored in an instance variable. So we can not be sure that the local variables will live till the method local inner class object lives, therefore the method local inner class object can not access the method local variable. To access the method local variables, the variable has to be declared as final.
Can a method local inner class access the local final variables?Why?
Yes. Because the final variables are stored on heap and live as long as the method local inner class object may live.
Which modifiers can be applied to the method local inner class?
Only abstract or final keyword isallowed.
Can a local class declared inside a static method have access to the instance members of the outer class?
No. There is no this reference available in the static method .The static method class can not have access to any members of the outer class other than static members.
 Can a method which is not in the definition of the superclass of an anonymous class be invoked on that anonymous class reference?
No. Compilation will fail.As the reference variable type of the anonymous class will be of superclass which will not know of any method defined inside the anonymous class the compilation will fail.
class SuperClass
{
void doSomething()
{
System.out.println("In the Super class");
}
}
class hasAnonymous
{
SuperClass anon = new SuperClass()
{
void doSomething()
{
System.out.println("In the Anonymous class");
}
void doStuff()
{
System.out.println("An Anonymous class method not present in
superClass");
}
};

public void doIt()
{
anon.doSomething(); // legal superClass has this method
anon.doStuff(); // Not legal
}
}


The above code does not compile as the superClass does not know about the anonymous class method doStuff().
Can an anonymous class define method of its own?
Yes. But there will be no way by which the methods defined in the anonymous class which are not present in its superclass be invoked. As only those methods which are defined in the suprclass which the anonymous class extends be invoked defining the methods in the anonymous class will be of no use.
Can an anonymous class implement an interface and also extend a class at the same time?
No. An anonymous class can either extend a class or implement a single interface. If the anonymous class is extending a class then it becomes the implementer of all the interfaces implemented by its superclass automatically.
Where to use Polymorphism in code
Probably this is the most important part of this Java Polymorphism tutorial and It’s good to know where you can use Polymorphism in Java while writing code. Its common practice to always replace concrete implementation with interface it’s not that easy and comes with practice but here are some common places where I check for polymorphism: 

1) Method argument:
Always use super type in method argument that will give you leverage to pass any implementation while invoking method. For example: 

public void showDescription(TradingSystem tradingSystem){
tradingSystem.description();
}


2) Variable names:
Always use Super type while you are storing reference returned from any Factory method in Java, This gives you flexibility to accommodate any new implementation from Factory. Here is an example of polymorphism while writing Java code which you can use retrieving reference from Factory: 

String systemName = Configuration.getSystemName();
TradingSystem system = TradingSystemFactory.getSystem(systemName);


3) Return type of method
Return type of any method is another place where you should be using interface to take advantage of Polymorphism in Java. In fact this is a requirement of Factory design pattern in Java to use interface as return type for factory method. 

public TradingSystem getSystem(String name){
//code to return appropriate implementation
}
Parameteric Polymorphism in Java
Java started to support parametric polymorphism with introduction of Generic in JDK1.5. Collection classes in JDK 1.5 are written using Generic Type which allows Collections to hold any type of object in run time without any change in code and this has been achieved by passing actual Type as parameter. For example see the below code of a parametric cache written using Generic which shows use of parametric polymorphism in Java. Read how to create Generic class and methods in Java for more details. 
interface cache{
public void put(K key, V value);
public V get(K key);
}



What is reflection ?
It is the process of examining / modifying the runtime behaviour of an object at runtime.
Where reflection is used
The Reflection API is mainly used in: 

• IDE (Integrated Development Environment) e.g. Eclipse, MyEclipse, NetBeans etc.
• Debugger
• Test Tools etc.
Is It Good to use Reflection in an application ? Why ?
no, It's like challenging the design of application.
What is perform java.lang.Class class
The java.lang.Class class performs mainly two tasks: 

• provides methods to get the metadata of a class at run time.
• provides methods to examine and change the run time behavior of a class.
Why is Reflection slower ?
Because it has to inspect the metadata in the bytecode instead of just using pre compiled addresses and constants.
What is Java Reflection API
Java Reflection is a process of examining or modifying the run time behavior of a class at run time. 

The java.lang.Class class provides many methods that can be used to get metadata, examine and change the run time behavior of a class. 

The java.lang and java.lang.reflect packages provide classes for java reflection.
 How Commonly used methods of Class class?
METHOD	DESCRIPTION
1) public String getName()	returns the class name
2) public static Class forName(String className)throws ClassNotFoundException	loads the class and returns the reference of Class class.
3) public Object newInstance()throws InstantiationException,IllegalAccessException	creates new instance.
4) public boolean isInterface()	checks if it is interface.
5) public boolean isArray()	checks if it is array.
6) public boolean isPrimitive()	checks if it is primitive.
7) public Class getSuperclass()	returns the superclass class reference
8) public Field[ ] getDeclaredFields()throws SecurityException	returns the total number of fields of this class.
9) public Method[ ] getDeclaredMethods()throws SecurityException	returns the total number of methods of this class.
10) public Constructor[ ] getDeclaredConstructors()throws SecurityException	returns the total number of constructors of this class.
11) public Method getDeclaredMethod(String name,Class[ ] parameterTypes)throws NoSuchMethodException,SecurityException	returns the method class instance.
How to get the object of Class class?
There are 3 ways to get the instance of Class class. They are as follows: 

• forName() method of Class class
• getClass() method of Object class
• the .class syntax
Determining the class object
Following methods of Class class is used to determine the class object: 

1) public boolean isInterface(): determines if the specified Class object represents an interface type. 

2) public boolean isArray(): determines if this Class object represents an array class. 

3) public boolean isPrimitive(): determines if the specified Class object represents a primitive type. 

Let's see the simple example of reflection api to determine the object type.

class Simple{}
interface My{}

class Test{
public static void main(String args[]){
try{
Class c=Class.forName("Simple");
System.out.println(c.isInterface());

Class c2=Class.forName("My");
System.out.println(c2.isInterface());

}catch(Exception e){System.out.println(e);}

}
}


Output:
false
true
forName() method of Class class
• is used to load the class dynamically.
• returns the instance of Class class.
• It should be used if you know the fully qualified name of class.This cannot be used for primitive types. 

Let's see the simple example of forName() method.

class Simple{}

class Test{
public static void main(String args[]){
Class c=Class.forName("Simple");
System.out.println(c.getName());
}
}

Output:Simple


What is Singleton class? Have you used Singleton before?
Singleton is a class which has only one instance in whole application and provides a getInstance() method to access the singleton instance. There are many classes in JDK which is implemented using Singleton pattern like java.lang.Runtime which provides getRuntime() method to get access of it and used to get free memory and total memory in Java.
 Which classes are candidates of Singleton? Which kind of class do you make Singleton in Java?
Any class which you want to be available to whole application and whole only one instance is viable is candidate of becoming Singleton. One example of this is Runtime class , since on whole java application only one runtime environment can be possible making Runtime Singleton is right decision. Another example is a utility classes like Popup in GUI application, if you want to show popup with message you can have one PopUp class on whole GUI application and anytime just get its instance, and call show() with message.
What is lazy and early loading of Singleton and how will you implement it?
As there are many ways to implement Singleton like using double checked locking or Singleton class with static final instance initialized during class loading. Former is called lazy loading because Singleton instance is created only when client calls getInstance() method while later is called early loading because Singleton instance is created when class is loaded into memory.
Give me some examples of Singleton pattern from Java Development Kit?
There are many classes in Java Development Kit which is written using singleton pattern, here are few of them: 

1.Java.lang.Runtime with getRuntime() method 

2.Java.awt.Toolkit with getDefaultToolkit() 

3.Java.awt.Desktop with getDesktop()
What is double checked locking in Singleton?
Double checked locking is a technique to prevent creating another instance of Singleton when call to getInstance() method is made in multi-threading environment. In Double checked locking pattern as shown in below example, singleton instance is checked two times before initialization. 

public static Singleton getInstance()
{
if(_INSTANCE == null)
{
synchronized(Singleton.class)
{
//double checked locking - because second check of Singleton instance with lock
if(_INSTANCE == null)
{
_INSTANCE = new Singleton();
}
}
}
return _INSTANCE;
}


Double checked locking should only be used when you have requirement for lazy initialization otherwise use Enum to implement singleton or simple static final variable.
How do you prevent for creating another instance of Singleton using clone() method?
Preferred way is not to implement Cloneable interface as why should one wants to create clone() of Singleton and if you do just throw Exception from clone() method as “Can not create clone of Singleton class”.
How do you prevent for creating another instance of Singleton using reflection?
Since constructor of Singleton class is supposed to be private it prevents creating instance of Singleton from outside but Reflection can access private fields and methods, which opens a threat of another instance. This can be avoided by throwing Exception from constructor as “Singleton already initialized”
How do you prevent for creating another instance of Singleton during serialization?
You can prevent this by using readResolve() method, since during serialization readObject() is used to create instance and it return new instance every time but by using readResolve you can replace it with original Singleton instance.
Why you should avoid the singleton anti-pattern at all and replace it with DI?
Singleton Dependency Injection: every class that needs access to a singleton gets the object through its constructors or with a DI-container.
Why Singleton is Anti pattern
With more and more classes calling getInstance() the code gets more and more tightly coupled, monolithic, not testable and hard to change and hard to reuse because of not configurable, hidden dependencies. Also, there would be no need for this clumsy double checked locking if you call getInstance less often (i.e. once).
How many ways you can write Singleton Class in Java?
I know at least four ways to implement Singleton pattern in Java 

1.Singleton by synchronizing getInstance() method 

2. Singleton with public static final field initialized during class loading. 

3. Singleton generated by static nested class, also referred as Singleton holder pattern. 

4. From Java 5 on-wards using Enumsp>
How to write thread-safe Singleton in Java?
Thread safe Singleton usually refers to write thread safe code which creates one and only one instance of Singleton if called by multiple thread at same time. There are many ways to achieve this like by using double checked locking technique as shown above and by using Enum or Singleton initialized by class loader.


Different types of memory used by JVM ?
Class , Heap , Stack , Register , Native Method Stack.
Which memory segment loads the java code ?
Code segment. .
When are static variables loaded in memory ?
They are loaded at runtime when the respective Class is loaded.
Does garbage collection guarantee that a program will not run out of memory?
Garbage collection does not guarantee that a program will not run out of memory. It is possible for programs to use up memory resources faster than they are garbage collected. It is also possible for programs to create objects that are not subject to garbage collection
What is a String Pool ?
String pool (String intern pool) is a special storage area in Java heap. When a string is created and if the string already exists in the pool, the reference of the existing string will be returned, instead of creating a new object and returning its reference.
Which are the different segments of memory ?
1. Stack Segment -
contains local variables and Reference variables(variables that hold the address of an object in the heap)

2. Heap Segment -
contains all created objects in runtime, objects only plus their object attributes (instance variables)

3. Code Segment -
The segment where the actual compiled Java bytecodes resides when loaded
Describe what happens when an object is created in Java ?
1. Memory is allocated from heap to hold all instance variables and implementation-specific data of the object and its superclasses. implementation-specific data includes pointers to class and method data. 

2. The instance variables of the objects are initialized to their default values. 

3. The constructor for the most derived class is invoked. The first thing a constructor does is call the constructor for its superclasses. This process continues until the constructor for java.lang.Object is called, as java.lang.Object is the base class for all objects in java. 

4. Before the body of the constructor is executed, all instance variable initializers and initialization blocks are executed. Then the body of the constructor is executed. Thus, the constructor for the base class completes first and constructor for the most derived class completes last.
how many objects are created with this code ?
String s =new String("abc");
Two objects will be created here. One object creates memory in heap with new operator and second in stack constant pool with "abc".
Describe, in general, how java's garbage collector works ?
The Java runtime environment deletes objects when it determines that they are no longer being used. This process is known as garbage collection. The Java runtime environment supports a garbage collector that periodically frees the memory used by objects that are no longer needed. The Java garbage collector is a mark-sweep garbage collector that scans Java's dynamic memory areas for objects, marking those that are referenced. After all possible paths to objects are investigated, those objects that are not marked (i.e. are not referenced) are known to be garbage and are collected.
Can I import same package/class twice? Will the JVM load the package twice at runtime?
One can import the same package or same class multiple times. Neither compiler nor JVM complains wil complain about it. And the JVM will internally load the class only once no matter how many times you import the same class.
 What is a class loader ? What are the different class loaders used by JVM ?
Part of JVM which is used to load classes and interfaces. 

Bootstrap , Extension and System are the class loaders used by JVM.
 Is JVM, a compiler or interpretor ?
Its an interpretor.
Explain java.lang.OutOfMemoryError ?
This Error is thrown when the Java Virtual Machine cannot allocate an object because it is out of memory, and no more memory could be made available by the garbage collector.
Should we override finalize method ?
Finalize is used by Java for Garbage collection. It should not be done as we should leave the Garbage Collection to Java itself..



How Java provide high Performance ?
Java uses Just-In-Time compiler to enable high performance. Just-In-Time compiler is a program that turns Java bytecode into instructions that can be sent directly to the processor.
Why is Java considered Portable Language ?
Java is a portable-language because without any modification we can use Java byte-code in any platform(which supports Java). So this byte-code is portable and we can use in any other major platforms.
How to find if JVM is 32 or 64 bit from Java program. ?
ou can find JVM - 32 bit or 64 bit by using System.getProperty() from Java program.
Java (JVM) Memory Model
Java memory management
As you can see in the above image, JVM memory is divided into separate parts. At broad level, JVM Heap memory is physically divided into two parts – Young Generation and Old Generation.
What is Young Generation of Java (JVM) Memory Model?
Young generation is the place where all the new objects are created. When young generation is filled, garbage collection is performed. This garbage collection is called Minor GC. Young Generation is divided into three parts – Eden Memory and two Survivor Memory spaces. 

Important Points about Young Generation Spaces: 

• Most of the newly created objects are located in the Eden memory space. 

• When Eden space is filled with objects, Minor GC is performed and all the survivor objects are moved to one of the survivor spaces. 

• Minor GC also checks the survivor objects and move them to the other survivor space. So at a time, one of the survivor space is always empty. 

• Objects that are survived after many cycles of GC, are moved to the Old generation memory space. Usually it’s done by setting a threshold for the age of the young generation objects before they become eligible to promote to Old generation.
What is Old Generation?
Old Generation memory contains the objects that are long lived and survived after many rounds of Minor GC. Usually garbage collection is performed in Old Generation memory when it’s full. Old Generation Garbage Collection is called Major GC and usually takes longer time.
Java Heap Memory Switches
Java provides a lot of memory switches that we can use to set the memory sizes and their ratios. Some of the commonly used memory switches are: 
VM SWITCH	VM SWITCH DESCRIPTION
-Xms	For setting the initial heap size when JVM starts
-Xmx	For setting the maximum heap size.
-Xmn	For setting the size of the Young Generation, rest of the space goes for Old Generation.
-XX:PermGen	For setting the initial size of the Permanent Generation memory
-XX:MaxPermGen	For setting the maximum size of Perm Gen
-XX:SurvivorRatio	For providing ratio of Eden space and Survivor Space, for example if Young Generation size is 10m and VM switch is -XX:SurvivorRatio=2 then 5m will be reserved for Eden Space and 2.5m each for both the Survivor spaces. The default value is 8.
-XX:NewRatio	For providing ratio of old/new generation sizes. The default value is 2.
what is Java Stack Memory?
Java Stack memory is used for execution of a thread. They contain method specific values that are short-lived and references to other objects in the heap that are getting referred from the method.
what is Method Area?
Method Area is part of space in the Perm Gen and used to store class structure (runtime constants and static variables) and code for methods and constructors..
what is Runtime Constant Pool?
Runtime constant pool is per-class runtime representation of constant pool in a class. It contains class runtime constants and static methods. Runtime constant pool is the part of method area.
What is Permanent Generation?
Permanent Generation or “Perm Gen” contains the application metadata required by the JVM to describe the classes and methods used in the application. Note that Perm Gen is not part of Java Heap memory. 

Perm Gen is populated by JVM at runtime based on the classes used by the application. Perm Gen also contains Java SE library classes and methods. Perm Gen objects are garbage collected in a full garbage collection.

What is difference between fail-fast and fail-safe?
Fail-safe iterators are just opposite to fail-fast.
They never fail if you modify the underlying collection on which they are iterating, because they work on
clone of Collection instead of original collection and that’s why they are called as fail-safe iterator.
Iterator of CopyOnWriteArrayList is an example of fail-safe Iterator also iterator written by ConcurrentHashMap keySet is also fail-safe iterator and never throw ConcurrentModificationException..
Can we use any class as Map key?
We can use any class as Map Key, however following points should be considered before using them. 

If the class overrides equals() method, it should also override hashCode() method. The class should follow the rules associated with equals() and hashCode() for all instances. 

If a class field is not used in equals(), you should not use it in hashCode() method. Best practice for user defined key class is to make it immutable, so that hashCode() value can be cached for fast performance. 

Also immutable classes make sure that hashCode() and equals() will not change in future that will solve any issue with mutability. 

For example,
 let’s say I have a class MyKey that I am using for HashMap key. //MyKey name argument passed is used for equals() and hashCode()

MyKey key = new MyKey("Pankaj"); //assume hashCode=1234

myHashMap.put(key, "Value");

// Below code will change the key hashCode() and equals()

// but it's location is not changed.

key.setName("Amit"); //assume new hashCode=7890

//below will return null, because HashMap will try to look for key

//in the same index as it was stored but since key is mutated,

//there will be no match and it will return null.

myHashMap.get(new MyKey("Pankaj"));

This is the reason why String and Integer are mostly used as HashMap keys.
What are the differences between Queue and Stack in java?
A collection designed for holding elements prior to processing.
Besides basic Collection operations, queues provide additional insertion, extraction, and inspection operations. 

Queues typically, but do not necessarily, order elements in a FIFO (first-in-first-out) manner.
Stack is also a form of Queue but one difference, it is LIFO (last-in-first-out).
Whatever the ordering used, the head of the queue is that element which would be removed by a call to remove() or poll(). Also note that Stack and Vector are both synchronized. 

Usage:
Use a queue if you want to process a stream of incoming items in the order that they are received.Good for work lists and handling requests. 

Use a stack if you want to push and pop from the top of the stack only. Good for recursive algorithms.
How can we make HashMap synchronized?
HashMap can be synchronized by Map m = Collections.synchronizedMap(hashMap);
What are IdentityHashMap and WeakHashMap?
IdentityHashMap : IdentityHashMap is similar to HashMap except that it uses reference equality when comparing elements.
IdentityHashMap class is not a widely used Map implementation.
While this class implements the Map interface, it intentionally violates Map’s general contract, which
What is NavigableMap in Java ? What are its benefits over Map?
NavigableMap Map was added in Java 1.6, it adds navigation capability to Map data structure. It provides methods like lowerKey() to get keys which is less than specified key, floorKey() to return keys which is less than or equal to specified key, ceilingKey() to get keys which is greater than or equal to specified key and higherKey() to return keys which is greater specified key from a Map. It also provide similar methods to get entries e.g. lowerEntry(), floorEntry(), ceilingEntry() and higherEntry(). 

Apart from navigation methods, it also provides utilities to create sub-Map e.g. creating a Map from entries of an exsiting Map like tailMap, headMap and subMap. headMap() method returns a NavigableMap whose keys are less than specified, tailMap() returns a NavigableMap whose keys are greater than the specified and subMap() gives a NavigableMap between a range, specified by toKey to fromKey.
What is the Difference between the Iterator and ListIterator?
Iterator : Iterator Can Only get Data From forward Direction . 

ListIterator : An iterator for lists that allows one to traverse the list in either direction.modify the list during iteration, and obtain the iterator’s current position in the list. 

A ListIterator has no current element. its cursor position always lies between the element that would be returned by a call to previous() and the element that would be returned by a call to next(). In a list of length n, there are n+1 valid index values, from 0 to n, inclusive.
Difference between Vector and ArrayList?
Vector & ArrayList both classes are implemented using dynamically resizable arrays, providing fast random access and fast traversal. ArrayList and Vector class both implement the List interface. 

1) Synchronization - ArrayList is not thread-safe whereas Vector is thread-safe. In Vector class each method like add(), get(int i) is surrounded with a synchronized block and thus making Vector class thread-safe. 

2) Data growth - Internally, both the ArrayList and Vector hold onto their contents using an Array. When an element is inserted into an ArrayList or a Vector, the object will need to expand its internal array if it runs out of room. A Vector defaults to doubling the size of its array, while the ArrayList increases its array size by 50 percent.
Which two method you need to implement for key Object in HashMap ?
In order to use any object as Key in HashMap, it must implements equals and hashcode method in Java. Read How HashMap works in Java for detailed explanation on how equals and hashcode method is used to put and get object from HashMap.
How to make a collection read only?
Use following methods: 

Collections.unmodifiableList(list);
Collections.unmodifiableSet(set);
Collections.unmodifiableMap(map);
These methods takes collection parameter and return a new read-only collection with same elements as in original collection.
What is BlockingQueue?
A Queue that additionally supports operations that wait for the queue to become non-empty when
retrieving an element, and wait for space to become available in the queue when storing an element.
BlockingQueue methods come in four forms: one throws an exception, the second returns a special value
(either null or false, depending on the operation), the third blocks the current thread indefinitely until the
operation can succeed, and the fourth blocks for only a given maximum time limit before giving up.
When do you use ConcurrentHashMap in Java?
This is another advanced level collection interview questions in Java which normally asked to check whether interviewer is familiar with optimization done on ConcurrentHashMap or not. ConcurrentHashMap is better suited for situation where you have multiple readers and one Writer or fewer writers since Map gets locked only during write operation. If you have equal number of reader and writer than ConcurrentHashMap will perform in line of Hashtable or synchronized HashMap.
Which implementation of the List interface provides for the fastest insertion of a new element into the middle of the list?
We have three implementation of List : Vector, ArrayList, LinkedList. ArrayList and Vector both use an array to store the elements of the list. When an element is inserted into the middle of the list the elements that follow the insertion point must be
Which collection classes provide random access of it’s elements?
ArrayList, HashMap, TreeMap, Hashtable classes provide random access to it’s elements.
What will happen if we put a key object in a HashMap which is already there ?
This tricky Java questions is part of How HashMap works in Java, which is also a popular topic to create confusing and tricky question in Java. well if you put the same key again than it will replace the old mapping because HashMap doesn't allow duplicate keys.
What will be the problem if you don't override hashcode() method ?
You will not be able to recover your object from hash Map if that is used as key in HashMap.
How to convert a string array to arraylist?
new ArrayList(Arrays.asList(myArray));
How can you suppress unchecked warning in Java ?
javac compiler for Java 5 generates unchecked warnings if you use combine raw types and generics types. You can be suppress those warnings by using @SuppressWarnings("unchecked") annotation.
What is the Properties class?
The properties class is a subclass of Hashtable that can be read from or written to a stream. It also provides the capability to specify a set of default values to be used.


How can an Arraylist be synchronized without using Vector?
Arraylist can be synchronized using:

Collections.synchronizedList(List list)
Other collections can be synchronized:
Collections.synchronizedMap(Map map)
Collections.synchronizedCollection(Collection c)
 What is difference between an ArrayList and a vector?
• Synchronization - ArrayList is not thread-safe whereas Vector is thread-safe. In Vector class each method like add(), get(int i) is surrounded with a synchronized block, thus making Vector class thread-safe. 

• Data growth - Internally, both the ArrayList and Vector hold onto their contents using an Array. When an element is inserted into an ArrayList or a Vector, the object will need to expand its internal array if it runs out of room. A Vector defaults to doubling the size of its array, while the ArrayList increases its array size by 50 percent. 

• Performance - Since vector is thread-safe, the performance is slower than ArrayList.
If an Employee class is present and its objects are added in an arrayList. Now I want the list to be sorted on the basis of the employeeID of Employee class. What are the steps?
• Implement Comparable interface for the Employee class and override the compareTo(Object obj) method in which compare the employeeID 

• Now call Collections.sort() method and pass the list as an argument. 

Now consider that Employee class is a jar file.

• 1) Since Comparable interface cannot be implemented, create Comparator and override the compare(Object obj, Object obj1) method . 

• 2) Call Collections.sort() on the list and pass comparator as an argument.
What is difference between List and a Set?
1. List can contain duplicate values but Set doesn't allow. 

2.List allows retrieval of data to be in same order in the way it is inserted but Set doesn't ensures the sequence in which data can be retrieved.(Except HashSet)
What are the classes implementing the List interface?
There are three implementation of List interface: 

ArrayList :It is a resizable array implementation. The size of the ArrayList can be increased dynamically also operations like add,remove and get can be formed once the object is created. It also ensures that the data is retrieved in the manner it was stored. The ArrayList is not thread-safe. 

Vector: It is thread-safe implementation of ArrayList. The methods are wrapped around a synchronized block. 

LinkedList: the LinkedList implements Queue interface too and provide FIFO (First In First Out) operation for add operation. It is faster than ArrayList if its mainly used forinsertion and deletion of elements.
What is difference between a HashMap and a HashTable?
Both collections implements Map. Both collections store value as key-value pairs. The key differences between the two are: 

1. Hashmap is not synchronized in nature but hashtable is. 

2. Another difference is that iterator in the HashMap is fail-safe while the enumerator for the Hashtable isn't. Fail-safe -if the Hashtable is structurally modified at any time after the iterator is created, in any way except through the iterator's own remove method, the iterator will throw a ConcurrentModificationException? 

3. HashMap permits null values and only one null key, while Hashtable doesn't allow key or value as null.
Which all classes implement Set interface ?
A Set is a collection that contains no duplicate elements. More formally, a set contains no pair of elements e1 and e2 such that e1.equals(e2), and at most one null element. HashSet,SortedSet and TreeSet are the commonly used class which implements Set interface. 

SortedSet - It is an interface which extends Set. A the name suggest, the interface allows the data to be iterated in the ascending order or sorted on the basis of Comparator or Comparable interface. All elements inserted into the interface must implement Comparable or Comparator interface. 

TreeSet - It is the implementation of SortedSet interface. This implementation provides guaranteed log(n) time cost for the basic operations (add, remove and contains). The class is not synchronized. The class uses Red-Black tree data structure. 

HashSet - This class implements the Set interface, backed by a hash table (actually a HashMap instance). It makes no guarantees as to the iteration order of the set; in particular, it does not guarantee that the order will remain constant over time. This class permits the null element. This class offers constant time performance for the basic operations (add, remove, contains and size), assuming the hash function disperses the elements properly among the buckets
What is difference between Arrays and ArrayList ?
• Arrays are created of fix size whereas ArrayList is dynamic in nature and can vary its length. Also the size of array cannot be incremented or decremented. But with arrayList the size is variable. 

• Once the array is created elements cannot be added or deleted from it. But with ArrayList the elements can be added and deleted at runtime. 

List list = new ArrayList();
list.add(1);
list.add(3);
list.remove(0) // will remove the element from the 1st location.

• ArrayList is one dimensional but array can be multidimensional.

int[][][] intArray= new int[3][2][1]; // 3 dimensional array

• Array can contain objects of a single data type or class. ArrayList if not used with generic can contain objects of different classes
When to use ArrayList or LinkedList ?
• Adding new elements is pretty fast for either type of list. Inserting element to nth location in arraylist and to first location in linkedlist takes O(1). 

• For the ArrayList, doing random lookup using "get" is faster O(1), but for LinkedList O(n), it's slow. It's slow because there's no efficient way to index into the middle of a linked list. Linkedlist lookup always start from 1st location. 

• When removing elements, using ArrayList is slow. This is because all remaining elements in the underlying array of Object instances must be shifted down for each remove operation. But LinkedList is fast, because deletion can be done simply by changing a couple of links. 

So an ArrayList works best for cases where you're doing random access on the list and a LinkedList works better if you're doing a lot of editing in the middle of the list.
What are advantages of iterating a collection using iterator?
For loop does not allow updating the collection(add or remove) whereas Iterator does. Also Iterator can be used where there is no clue what type of collections will be used because all collections implement Iterator interface.
Which design pattern Iterator follows?
It follows Iterator design pattern. Iterator Pattern is a type of behavioral pattern. The Iterator pattern is one, which allows you to navigate through a collection of data using a common interface without knowing about the underlying implementation. Iterator should be implemented as an interface. This allows the user to implement it anyway its easier for him/her to return data. The benefits of Iterator are about their strength to provide a common interface for iterating through collections without bothering about underlying implementation. 

Example of Iteration design pattern - Enumeration The class java.util.Enumeration is an example of the Iterator pattern. It represents and abstract means of iterating over a collection of elements in some sequential order without the client having to know the representation of the collection being iterated over. It can be used to provide a uniform interface for traversing collections of all kinds.
Why is it preferred to declare: List list = new ArrayList(); instead of ArrayList = new ArrayList();
It is preferred because: 

• If later on code needs to be changed from ArrayList to Vector then only at the declaration place we can do that. 

• The most important one – If a function is declared such that it takes list. E.g void showDetails(List list); • When the parameter is declared as List to the function it can be called by passing any subclass of List like ArrayList, Vector, LinkedList making the function more flexible.
Which data structure HashSet implements ?
HashSet implements hashTable internally to store the data. The data passed to hashset is stored as key in hashTable with null as value.
What is a ConcurrentHashMap ?
A concurrentHashMap is thread-safe implementation of Map interface. In this class put and remove method are synchronized but not get method. This class is different from Hashtable in terms of locking; it means that hashtable use object level lock but this class uses bucket level lock thus having better performance. The allowed concurrency among update operations is guided by the optional concurrencyLevel constructor argument (default 16), which is used as a hint for internal sizing. The table is internally partitioned to try to permit the indicated number of concurrent updates without contention. Because placement in hash tables is essentially random, the actual concurrency will vary. Ideally, you should choose a value to accommodate as many threads as will ever concurrently modify the table. Using a significantly higher value than you need can waste space and time, and a significantly lower value can lead to thread contention. But overestimates and underestimates within an order of magnitude do not usually have much noticeable impact. A value of one is appropriate when it is known that only one thread will modify and all others will only read. Also, resizing this or any other kind of hash table is a relatively slow operation, so, when possible, it is a good idea to provide estimates of expected table sizes in constructors.
What is the difference between iterator access and index access?
Index based access allow access of the element directly on the basis of index. The cursor of the datastructure can directly goto the 'n' location and get the element. It does not traverse through n-1 elements. 

In Iterator based access, the cursor has to traverse through each element to get the desired element.So to reach the 'n'th element it need to traverse through n-1 elements. 

Insertion,updation or deletion will be faster for iterator based access if the operations are performed on elements present in between the datastructure. 

Insertion,updation or deletion will be faster for index based access if the operations are performed on elements present at last of the datastructure. 

Traversal or search in index based datastructure is faster. 

ArrayList is index access and LinkedList is iterator access.
How to make a List (ArrayList,Vector,LinkedList) read only ?
A list implementation can be made read only using
Collections.unmodifiableList(list). This method returns a new list. If a user tries to perform add operation on the new list; UnSupportedOperationException is thrown.
How to sort a list in reverse order?




Can a null element be added to a Treeset or HashSet ?
A null element can be added only if the set is of size 1 because when a second element is added then as per set defination a check is made to check duplicate value and comparison with null element will throw NullPointerException. HashSet is based on hashMap and can contain null element.
How to sort list of strings - case insensitive ?
Using Collections.sort(list, String.CASE_INSENSITIVE_ORDER);
What is WeakHashMap?
A hashtable-based Map implementation with weak keys. An entry in a WeakHashMap will automatically be removed when its key is no longer in ordinary use. More precisely, the presence of a mapping for a given key will not prevent the key from being discarded by the garbage collector, that is, made finalizable, finalized, and then reclaimed. When a key has been discarded its entry is effectively removed from the map, so this class behaves somewhat differently than other Map implementations.
Which is faster to iterate LinkedHashSet or LinkedList?
LinkedList.
Arrange in the order of speed - HashMap,HashTable, Collections.synchronizedMap,concurrentHashmap
HashMap is fastest, ConcurrentHashMap,Collections.synchronizedMap,HashTable.
What is identityHashMap?
The IdentityHashMap uses == for equality checking instead of equals(). This can be used for both performance reasons, if you know that two different elements will never be equals and for preventing spoofing, where an object tries to imitate another.
 What is difference between List < ? > and List < Object > in Java?
List < ? > is List of unknown type while List< Object > is essentially List of any Type.
You can assign List< String >, List< Integer > to List< ? > but you can not assign List< String > to List< Object >.

This is because List< Object > can store any any thing including String, Integer etc but List< String > can only store Strings.
What is Bounded and Unbounded wildcards in Generics ?
Bounded wildcards are : 

< ? extends T > which impose an upper bound by ensuring that type must be sub class of T.
< ? super T > where its imposing lower bound by ensuring Type must be super class of T.
< ? > represent and unbounded type because < ? > can be replace with any Type.
Can you pass List< String > to a method which accepts List< Object > ?
In first glance it looks like : String is Object so List can be used where List< Object > is required but this is not true. It will result in compilation error. 

This is because List< Object > can store any any thing including String, Integer etc but List< String > can only store Strings !!.
How HashMap works in Java ?
HashMap stores key-value pair in Map & Map.Entry is static nested class implementation. HashMap works on hashing algorithm and uses hashCode() and equals() method in put and get methods. 

When we call put method by passing key-value pair : HashMap uses Key hashCode() with hashing to find out the index to store the key-value pair. The Map.Entry is stored in the LinkedList, so if there are already existing entry, it uses equals() method to 

check if the passed key already exists. If entry already exists then it overwrites the value else it creates a new entry and store this key-value Entry. 

When we call get method by passing Key : Again it uses the hashCode() to find the index in the array and then use equals() method to find the correct Entry and return it’s value. 

Remember : hashCode() is used to narrow down the results for fast searching. objects having same hashCode() doesn't mean that they're same, It only means that those objects are stored in same bucket.
What are advantages of using Generics ?
Generics provides compile time type-safety and ensures that you only insert correct Type in collection and avoids ClassCastException during runtime.
What do you understand by iterator fail-fast property?
Fail-fast Iterators fail as soon as they realized that structure of Collection has been changed since iteration has begun. ( Structural changes means adding, removing or updating any element from collection while one thread is Iterating over that collection ). Fail-fast behaviour is implemented by keeping a modification count and if iteration thread realizes the change in modification count it throws ConcurrentModificationException
How to avoid ConcurrentModificationException while iterating a collection?
You should first try to find another alternative iterator which are fail-safe.
For example if you are using List and you can use ListIterator.


 what is inheritance?
• inheritance is one of the oops concepts in java.inheritance is concept of getting properties of one class object to another class object. 

• Inheritance represents the IS-A relationship,also known as parent-child relationship.
Why we need to use Inheritance?

Which of these keyword must be used to inherit a class? 

a) super
b) this
c) extent
d) extends
what are the types of inheritance?
what is syntax of inheritance?
 What is the output of this program?
    class A {
     int i;
     void display() {
     System.out.println(i);
      }
     }

     class B extends A {
     int j;
     void display() {
     System.out.println(j);
      }
     }

     class inheritance_demo {
     public static void main(String args[])
     {
     B obj = new B();
     obj.i=1;
     obj.j=2;
     obj.display();
      }
     }

a) 0
b) 1
c) 2
d) Compilation Error





 How Inheritance can be implemented in java?








what is multilevel inheritance?
what is Multiple inheritance?why Java Doesn't Support multiple Inheritance.










How do you restrict a member of a class from inheriting to it’s sub classes.?
Which of these keywords is used to refer to member of base class from a sub class? 

a) upper
b) super
c) this
d) None of the mentioned

How do you implement multiple inheritance in java?
Using interfaces java can support multiple inheritance concept in java. in java can not extend more than one classes, but a class can implement more than one interfaces. 

Program:
interface A{
}
interface B{
}
class C implements A,B{
}
What is the output of this program?
     class A {
     int i;
       }
     class B extends A {
     int j;
     void display() {
     super.i = j + 1;
     System.out.println(j + " " + i);
       }
     }
     class inheritance {
     public static void main(String args[])
     {
     B obj = new B();
     obj.i=1;
     obj.j=2;
     obj.display();
       }
     }
a) 2 2 b) 3 3 c) 2 3 d) 3 2








Can a class extend itself?
No,A class can't extend itself.
 What happens if super class and sub class having same field name?
Super class field will be hidden in the sub class. You can access hidden super class field in sub class using super keyword.
 Does Java support Multiple Inheritance ?
No, Java doesn't support multiple inheritance. Interfaces doesn't facilitate inheritance and hence implementation of multiple interfaces doesn't make multiple inheritance.
Are constructors inherited? Can a subclass call the parent's class constructor? When?
You cannot inherit a constructor. That is, you cannot create a instance of a subclass using a constructor of one of it's superclasses. One of the main reasons is because you probably don't want to override the superclasses constructor, which would be possible if they were inherited. By giving the developer the ability to override a superclasses constructor you would erode the encapsulation abilities of the language.
What is the output of this program?
     class A {
     public int i;
     private int j;
      }
     class B extends A {
     void display() {
     super.j = super.i + 1;
     System.out.println(super.i + " " + super.j);
      }
     }
     class inheritance {
     public static void main(String args[])
     {
     B obj = new B();
     obj.i=1;
     obj.j=2;
     obj.display();
      }
     }
a) 2 2 b) 3 3 c) Runtime Error d) Compilation Error
Why java doesn't support multiple Inheritance ?
You know that all classes in java are inherited from java.lang.Object class. Are interfaces also inherited from Object class.?
No, only classes in java are inherited from Object class. Interfaces in java are not inherited from Object class. But, classes which implement interfaces are inherited from Object class.
What is the output of this program?
     class A {
     public int i;
     public int j;
     A() {
     i = 1;
     j = 2;
      }
     }
     class B extends A {
     int a;
     B() {
     super();
      }
     }
     class super_use {
     public static void main(String args[])
     {
     B obj = new B();
     System.out.println(obj.i + " " + obj.j)
      }
     }
a) 1 2 b) 2 1 c) Runtime Error d) Compilation Error






Can we reduce the visibility of the inherited or overridden method ?
No.
A class member declared protected becomes member of subclass of which type? 

a) public member
b) private member
c) protected member
d) static member
Which of the following is tightly bound ? Inheritance or Composition ?
Inheritence.
Difference Between this() and super() ?
1.this is a reference to the current object in which this keyword is used whereas super is a reference used to access members specific to the parent Class. 2.this is primarily used for accessing member variables if local variables have same name, for constructor chaining and for passing itself to some method whereas super is primarily used to initialize base class members within derived class constructor.
What is the output of this program?
     class A {
     public int i;
     protected int j;
       }
     class B extends A {
     int j;
     void display() {
     super.j = 3;
     System.out.println(i + " " + j);
       }
     }
     class Output {
     public static void main(String args[])
     {
     B obj = new B();
     obj.i=1;
     obj.j=2;
     obj.display();
       }
     }


a) 1 2
b) 2 1
c) 1 3
d) 3 1
Answer: a Explanation: Both class A & B have member with same name that is j, member of class B will be called by default if no specifier is used.
I contains 1 & j contains 2, printing 1 2. 

output: 

$ javac Output.java
$ java Output
1 2
What will happen if class implement two interface having common method?
That would not be a problem as both are specifying the contract that implement class has to follow. If class C implement interface A & interface B then Class C thing I need to implement print() because of interface A then again Class think I need to implement print() again because of interface B, it sees that there is already a method called test() implemented so it's satisfied.
Does a class inherit the constructor of its super class?
No
What are points to consider in terms of access modifier when we are overriding any method?
1. Overriding method can not be more restrictive than the overridden method. 

reason : in case of polymorphism , at object creation jvm look for actual runtime object. jvm does not look for reference type and while calling methods it look for overridden method. 

If by means subclass were allowed to change the access modifier on the overriding method, then suddenly at runtime—when the JVM invokes the true object's version of the method rather than the reference type's version then it will be problematic 

2. In case of subclass and superclass define in different package, we can override only those method which have public or protected access. 

3. We can not override any private method because private methods can not be inherited and if method can not be inherited then method can not be overridden.


Why use Java interface?
There are mainly three reasons to use interface. They are given below. 

• It is used to achieve fully abstraction.
• By interface, we can support the functionality of multiple inheritance.
• It can be used to achieve loose coupling.

In other words, Interface fields are public, static and final bydefault, and methods are public and abstract.
Interface
What is Interface in Java?
An interface in java is a blueprint of a class. It has static constants and abstract methods only.
The interface in java is a mechanism to achieve fully abstraction. There can be only abstract methods in the java interface not method body. It is used to achieve fully abstraction and multiple inheritance in Java. 
Java Interface also represents IS-A relationship.
It cannot be instantiated just like abstract class.
What is the Understanding relationship between classes and interfaces?
As shown in the figure given below, a class extends another class, an interface extends another interface but a class implements an interface. Interface
 Give the Simple example of Java interface
In this example, Printable interface have only one method, its implementation is provided in the A class.
interface printable{
void print();
}

class A6 implements printable{
public void print(){System.out.println("Hello");}

public static void main(String args[]){
A6 obj = new A6();
obj.print();
}
}

Output:Hello
What is the Multiple inheritance in Java by interface?
If a class implements multiple interfaces, or an interface extends multiple interfaces i.e. known as multiple inheritance 
Interface
interface Printable{
void print();
}

interface Showable{
void show();
}

class A7 implements Printable,Showable{

public void print(){System.out.println("Hello");}
public void show(){System.out.println("Welcome");}

public static void main(String args[]){
A7 obj = new A7();
obj.print();
obj.show();
}
}

Output: Hello
Welcome
Multiple inheritance is not supported through class in java but it is possible by interface, why?
As we have explained in the inheritance chapter, multiple inheritance is not supported in case of class. But it is supported in case of interface because there is no ambiguity as implementation is provided by the implementation class. For example: 
interface Printable{
void print();
}
interface Showable{
void print();
}

class TestTnterface1 implements Printable,Showable{
public void print(){System.out.println("Hello");}
public static void main(String args[]){
TestTnterface1 obj = new TestTnterface1();
obj.print();
}
}

Hello

As you can see in the above example, Printable and Showable interface have same methods but its implementation is provided by class TestTnterface1, so there is no ambiguity.
What is Interface inheritance ?
A class implements interface but one interface extends another interface .
interface Printable{
void print();
}
interface Showable extends Printable{
void show();
}
class Testinterface2 implements Showable{

public void print(){System.out.println("Hello");}
public void show(){System.out.println("Welcome");}
public static void main(String args[]){
Testinterface2 obj = new Testinterface2();
obj.print();
obj.show();
}
}

Hello
Welcome
What is marker or tagged interface?
An interface that have no member is known as marker or tagged interface. For example: Serializable, Cloneable, Remote etc. They are used to provide some essential information to the JVM so that JVM may perform some useful operation.
//How Serializable interface is written?
public interface Serializable{
}
What is Nested Interface in Java
An interface can have another interface i.e. known as nested interface. We will learn it in detail in the nested classes chapter. For example:
interface printable{
void print();
interface MessagePrintable{
void msg();
}
}


What are different oops concept in java?
OOPs stands for Object Oriented Programming. The concepts in oops are similar to any other programming languages. Basically, it is program agnostic. The different OOps concepts are : 

• Polymorphism
• Inheritance
• Abstraction
• Encapsulation
• Aggregation
• Composition
• Association
 What is polymorphism?
The ability to define a function in multiple forms is called Polymorphism. In java, c++ there are two types of polymorphism: compile time polymorphism (overloading) and runtime polymorphism (overriding). 

Mehtod overriding: Overriding occurs when a class method has the same name and signature as a method in parent class. When you override methods, JVM determines the proper methods to call at the program’s run time, not at the compile time. 

Overloading: Overloading is determined at the compile time. It occurs when several methods have same names with: • Different method signature and different number or type of parameters. • Same method signature but different number of parameters. • Same method signature and same number of parameters but of different type 

Example of Overloading
int add(int a,int b)
float add(float a,int b)
float add(int a ,float b)
void add(float a)
int add(int a)
void add(int a) //error conflict with the method int add(int a)



class BookDetails
{
String title;
setBook(String title){}
}
class ScienceBook extends BookDetails
{
setBook(String title){} //overriding
setBook(String title, String publisher,float price){} //overloading
}
.
What is inheritance?
Inheritance allows a Child class to inherit properties from its parent class. In Java this is achieved by using extends keyword. Only properties with access modifier public and protected can be accessed in child class. public class Parent { public String parentName; public String familyName; protected void printMyName() { System.out.println(“ My name is “+ chidName+” “ +familyName); } } public class Child extends Parent { public String childName; public int childAge; //inheritance protected void printMyName() { System.out.println(“ My child name is “+ chidName+” “ +familyName); } }
What is multiple inheritance and does java support?
If a child class inherits the property from multiple classes is known as multiple inheritance. Java does not allow to extend multiple classes, to overcome this problem it allows to implement multiple Interfaces.
What is an abstraction ?
Abstraction is a way of converting real world objects in terms of class. Its a concept of defining an idea in terms of classes or interface. For example creating a class Vehicle and injecting properties into it. E.g 
public class Vehicle
{
public String colour;
public String model;
}
What is Encapsulation?
The encapsulation is achieved by combining the methods and attribute into a class. The class acts like a container encapsulating the properties. The users are exposed mainly public methods.The idea behind is to hide how thinigs work and just exposing the requests a user can do.
What is Association?
Association is a relationship where all object have their own lifecycle and there is no owner. Let's take an example of Teacher and Student. Multiple students can associate with single teacher and single student can associate with multiple teachers but there is no ownership between the objects and both have their own lifecycle. Both can create and delete independently.
What is Aggregation?
Aggregation is a specialize form of Association where all object have their own lifecycle but there is ownership and child object can not belongs to another parent object. Let's take an example of Department and teacher. A single teacher can not belongs to multiple departments, but if we delete the department teacher object will not destroy. We can think about "has-a" relationship.
 What is Composition ?
Composition is again specialize form of Aggregation and we can call this as a "death" relationship. It is a strong type of Aggregation. Child object dose not have their lifecycle and if parent object deletes all child object will also be deleted. Let's take again an example of relationship between House and rooms. House can contain multiple rooms there is no independent life of room and any room can not belongs to two different house if we delete the house room will automatically delete.



Why is main() method static?
To access a static method class object is not needed. The method can be accessed directly with the help of ClassName. So when a program is started the jvm search for the class with main method and calls it without creating an object of the class.
 What is difference between abstract class and interface?
• A class is called abstract when it contains at least one abstract method. It can also contain n numbers of concrete method.Interface can contain only abstract( non implemented) methods. 

• The abstract class can have public,private,protect or default variables and also constants. In interface the variable is by default public final. In nutshell the interface doesn't have any variables it only has constants. 

• A class can extend only one abstract class but a class can implement multiple interfaces. 

• If an interface is implemented its compulsory to implement all of its methods but if an abstract class is extended its not compulsory to implement all methods. 

• The problem with an interface is, if you want to add a new feature (method) in its contract, then you MUST implement those method in all of the classes which implement that interface. However, in the case of an abstract class, the method can be simply implemented in the abstract class and the same can be called by its subclass.
What is the difference between static and instance methods?
Instance method belongs to the instance of a class therefore it requires an instance before it can be invoked, whereas static method belongs to the class itself and not to any class instance so it doesn’t need an instance to be invoked. Instance methods use dynamic (late) binding, whereas static methods use static (early) binding. When the JVM invokes a class instance method, it selects the method to invoke based on the type of the object reference, which is always known at run-time. On the other hand, when the JVM invokes a static method, it selects the method to invoke based on the actual class of the object, which may only be known at compile time.
Can static block throw exception?
Yes, static block can throw only Runtime exception or can use a try-catch block to catch checked exception. Typically scenario will be if JDBC connection is created in static block and it fails then exception can be caught, logged and application can exit. If System.exit() is not done, then application may continue and next time if the class is referred JVM will throw NoClassDefFounderror since the class was not loaded by the Classloader.
What are the different types of references in java?
Java has a more expressive system of reference than most other garbage-collected programming languages, which allows for special behavior for garbage collection. A normal reference in Java is known as a strong reference. The java.lang.ref package defines three other types of references—soft, weak and phantom references. Each type of reference is designed for a specific use. 

A SoftReference can be used to implement a cache. An object that is not reachable by a strong reference (that is, not strongly reachable) but is referenced by a soft reference is called softly reachable. A softly reachable object may be garbage collected at the discretion of the garbage collector. This generally means that softly reachable objects will only be garbage collected when free memory is low, but again, it is at the discretion of the garbage collector. Semantically, a soft reference means "keep this object unless the memory is needed." 

A WeakReference is used to implement weak maps. An object that is not strongly or softly reachable, but is referenced by a weak reference is called weakly reachable. A weakly reachable object will be garbage collected during the next collection cycle. This behavior is used in the class java.util.WeakHashMap. A weak map allows the programmer to put key/value pairs in the map and not worry about the objects taking up memory when the key is no longer reachable 

A PhantomReference is used to reference objects that have been marked for garbage collection and have been finalized, but have not yet been reclaimed. An object that is not strongly, softly or weakly reachable, but is referenced by a phantom reference is called phantom reachable. This allows for more flexible cleanup than is possible with the finalization mechanism alone. Semantically, a phantom reference means "this object is no longer needed and has been finalized in preparation for being collected."
Does java support multiple interitance? Why?
Java doesn't support multiple inheritance but it provide a way through which it can enact it. Consider the scenario is C++
Class A
{
public void add()
{
// some text
}
}
Class B
{
public void add()
{
// some text
}
}
Class C extends A,B
{
public static void main(String arg[])
{
C objC = new C();
objC.add(); // problem, compiler gets confused and cant
decide to call Class A or B method.
}

This problem is called Diamond problem.

This problem in java is taken care with the use of interfaces In Java similar problem would look like:

interface A
{
add();
}
interface B
{
add();
}
class C implements A,B
{
add()
{
// doesn't matter which interface it belong to
}
}
 Can this keyword be assigned null value?
No
How to change the heap size of a JVM?
The old generation's default heap size can be overridden by using the -Xms and -Xmx switches to specify the initial and maximum sizes respectively: java -Xms -Xmx program 

For example:
java -Xms64m -Xmx128m program
What is memory leak?
A memory leak is where an unreferenced object that will never be used again still hangs around in memory and doesn't get garbage collected.
What is difference between instanceof and isInstance(Object obj)?
Differences are as follows: 

1) instanceof is a reserved word of Java, but isInstance(Object obj) is a method of java.lang.Class. 

2) instanceof is used of identify whether the object is type of a particular class or its subclass but isInstance(obj) is used to identify object of a particular class.
Java supports pass by value or pass by reference?
Java supports only pass by value. The arguments passed as a parameter to a method is mainly primitive data types or objects. For the data type the actual value is passed. Java passes the references by value just like any other parameter. The pointer to the object is passed as value. Thus, method manipulation will alter the objects, since the references point to the original object but will not intialize the new object. Consider the example: 
The method successfully alters the value of pnt1, even though it is passed by value; however, a swap of pnt1 and pnt2 fails! This is the major source of confusion. In the main() method, pnt1 and pnt2 are nothing more than object references. When you pass pnt1 and pnt2 to the tricky() method, Java passes the references by value just like any other parameter. This means the references passed to the method are actually copies of the original references. 

public void tricky(Point arg1, Point arg2)
{
arg1.x = 100;
arg1.y = 100;
Point temp = arg1;
arg1 = arg2;
arg2 = temp;
}
public static void main(String [] args)
{
Point pnt1 = new Point(0,0);
Point pnt2 = new Point(0,0);
System.out.println("X: " + pnt1.x + " Y: " +pnt1.y);
System.out.println("X: " + pnt2.x + " Y: " +pnt2.y);
System.out.println(" ");
tricky(pnt1,pnt2);
System.out.println("X: " + pnt1.x + " Y:" + pnt1.y);
System.out.println("X: " + pnt2.x + " Y: " +pnt2.y);
}

OutPut:
X: 0 Y: 0
X: 0 Y: 0
X: 100 Y: 100
X: 0 Y: 0
What is the difference between equals() and ==?
== operator is used to compare the references of the objects. public bollean equals(Object o) is the method provided by the Object class. The default implementation uses == operator to compare two objects. But since the method can be overriden like for String class. equals() method can be used to compare the values of two objects. 
String str1 = "MyName";
String str2 = new String("MyName");
String str3 = str2;
if(str1 == str2)
{
System.out.println("Objects are equal")
}
else
{
System.out.println("Objects are not equal")
}
if(str1.equals(str2))
{
System.out.println("Objects are equal")
}
else
{
System.out.println("Objects are not equal")
}

Output:
Objects are not equal
Objects are equal

String str2 = "MyName";
String str3 = str2;
if(str2 == str3)
{
System.out.println("Objects are equal")
}
else
{
System.out.println("Objects are not equal")
}
if(str3.equals(str2))
{
System.out.println("Objects are equal")
}
else
{
System.out.println("Objects are not equal")
}

Output:
Objects are equal
Objects are equal
Can an abstract class have a static method?
Yes an abstract class have a static method and it can be accessed by any other class(even not a concrete class).
When an obj is passed through a function , one can set the properties but cannot set a new memory location?
It is because when u pass an object the address value is passed and stored in some new address . like if address 1234 is passed , it is stored in 4567 location. So if u change in the value of an object it will take the address from 4567 and do 1234.setXXX(). If u set the object to null it will set 4567=null.
Why static methods cannot access non static variables or methods?
A static method cannot access non static variables or methods because static methods doesn't need the object to be accessed. So if a static method has non static variables or non static methods which has instantiated variables they will no be intialized since the object is not created and this could result in an error.
What is difference between stringbuffer and stringbuilder?
The only difference between StringBuffer and StringBuilder is that StringBuilder is unsynchronized whereas StringBuffer is synchronized. So when the application needs to be run only in a single thread then it is better to use StringBuilder. StringBuilder is more efficient than StringBuffer. 

Criteria to choose among StringBuffer and StringBuilder 

• If your text can change and will only be accessed from a single thread, use a StringBuilder 2)because StringBuilder is unsynchronized. 

• If your text can changes, and will be accessed from multiple threads, use a StringBuffer because StringBuffer is synchronous. .
Consider a scenario in which the admin want to sure that if some one has written System.exit() at some part of application then before system shutdown all the resources should be released. How is it possible?
This is possible using Runtime.getRuntime().addShutdownHook(Thread hook).
Straight from Java Spec:
This method registers a new virtual-machine shutdown hook.
The Java virtual machine shuts down in response to two kinds of events:


• The program exits normally, when the last non-daemon thread exits or when the exit (equivalently, System.exit) method is invoked. 

• The virtual machine is terminated in response to a user interrupt, such as typing ^C, or a system-wide event, such as user logoff or system shutdown. 

A shutdown hook is simply an initialized but unstarted thread. When the virtual machine begins its shutdown sequence it will start all registered shutdown hooks in some unspecified order and let them run concurrently. When all the hooks have finished it will then run all uninvoked finalizers if finalization-on-exit has been enabled. Finally, the virtual machine will halt. Note that daemon threads will continue to run during the shutdown sequence, as will non-daemon threads if shutdown was initiated by invoking the exit method. Once the shutdown sequence has begun it can be stopped only by invoking the halt method, which forcibly terminates the virtual machine.
What is the difference between final, finally and finalize() in Java?
final - declaread as constant. A final variable act as constant, a final class is immutable and a final method cannot be ovrriden. 

finally - handles exception. The finally block is optional and provides a mechanism to clean up regardless of what happens within the try block (except System.exit(0) call). Use the finally block to close files or to release other system resources like database connections, statements etc. 

finalize() - method helps in garbage collection. A method that is invoked before an object is discarded by the garbage collector, allowing it to clean up its state. Should not be used to release non-memory resources like file handles, sockets, database connections etc because Java has only a finite number of these resources and you do not know when the garbage collection is going to kick in to release these non-memory resources through the finalize() method
How does Java allocate stack and heap memory?
Each time an object is created in Java it goes into the part of memory known as heap. The primitive variables like int and double are allocated in the stack, if they are local method variables and in the heap if they are member variables (i.e. fields of a class). In Java methods local variables are pushed into stack. When a method is invoked and stack pointer is decremented when a method call is completed. In a multi-threaded application each thread will have its own stack but will share the same heap. This is why care should be taken in your code to avoid any concurrent access issues in the heap space. The stack is threadsafe (each thread will have its own stack) but the heap is not threadsafe unless guarded with synchronisation through your code.
Explain re-entrant, recursive and idempotent methods/functions?
A method in stack is re-entrant allowing multiple concurrent invocations that do not interfere with each other.
Can a private variable or method of a class can be accessed?
Yes its possible using reflection.
What is difference between static block and the init block?
The static block is loaded when the class is loaded by the JVM for the 1st time only whereas init {} block is loaded every time class is loaded. Also first the static block is loaded then the init block. 
public class LoadingBlocks
{
static
{
System.out.println("Inside static");
}
{
System.out.println("Inside init");
}
public static void main(String args[])
{
new LoadingBlocks();
new LoadingBlocks();
new LoadingBlocks();
}
}

Output:
Inside static
Inside init
Inside init
Inside init
Why inner class can access only final variable?
Local classes can most definitely reference instance variables. The reason they cannot reference non final local variables is because the local class instance can remain in memory after the method returns. When the method returns the local variables go out of scope, so a copy of them is needed. If the variables weren't final then the copy of the variable in the method could change, while the copy in the local class didn't, so they'd be out of synch. 
Anonymous inner classes require final variables because of the way they are implemented in Java. An anonymous inner class (AIC) uses local variables by creating a private instance field which holds a copy of the value of the local variable. The inner class isn't actually using the local variable, but a copy. It should be fairly obvious at this point that a "Bad Thing"â„¢ can happen if either the original value or the copied value changes; there will be some unexpected data synchronization problems. In order to prevent this kind of problem, Java requires you to mark local variables that will be used by the AIC as final (i.e., unchangeable). This guarantees that the inner class' copies of local variables will always match the actual values.
What is fully abstract class?
An abstract class which has all methods as abstract and all fields are public static final.
What is dynamic binding and static binding?
Method invocation The Java programming language provides two basic kinds of methods: instance methods and class (or static) methods. The differences are:

1. Instance methods require an instance before they can be invoked, whereas class methods do not.
2. Instance methods use dynamic (late) binding, whereas class methods use static (early) binding.


When the Java virtual machine invokes a class method, it selects the method to invoke based on the type of the object reference, which is always known at compile-time. On the other hand, when the virtual machine invokes an instance method, it selects the method to invoke based on the actual class of the object, which may only be known at run time.

What is Java Reflection?
Reflection is commonly used by programs which require the ability to examine or modify the runtime behavior of applications running in the Java virtual machine. 

	Drawbacks of Reflection: Reflection is powerful, but should not be used indiscriminately. If it is possible to perform an operation without using reflection, then it is preferable to avoid using it. The following concerns should be kept in mind when accessing code via reflection. 

	Performance Overhead: Because reflection involves types that are dynamically resolved, certain Java virtual machine optimizations can not be performed. Consequently, reflective operations have slower performance than their non-reflective counterparts, and should be avoided in sections of code which are called frequently in performance-sensitive applications. 

	Security Restrictions: Reflection requires a runtime permission which may not be present when running under a security manager. This is in an important consideration for code which has to run in a restricted security context, such as in an Applet 

	Exposure of Internals: Since reflection allows code to perform operations that would be illegal in non-reflective code, such as accessing private fields and methods, the use of reflection can result in unexpected side-effects, which may render code dysfunctional and may destroy portability. Reflective code breaks abstractions and therefore may change behavior with upgrades of the platform.
	
Can an abstract class have a constructor?
	Yes an abstract class have a default and parameterized constructors.

